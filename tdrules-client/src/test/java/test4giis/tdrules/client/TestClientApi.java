package test4giis.tdrules.client;

import static org.mockserver.integration.ClientAndServer.startClientAndServer;
import static org.mockserver.matchers.Times.exactly;
import static org.mockserver.model.HttpRequest.request;
import static org.mockserver.model.HttpResponse.response;
import static org.mockserver.stop.Stop.stopQuietly;

import java.sql.SQLException;

import org.junit.AfterClass;
import org.junit.BeforeClass;
import org.junit.Test;
import org.mockserver.integration.ClientAndServer;
import org.mockserver.model.JsonBody;
import org.mockserver.model.MediaType;
import org.mockserver.socket.PortFactory;

import giis.tdrules.client.TdRulesApi;
import giis.tdrules.model.io.ModelJsonSerializer;
import giis.tdrules.openapi.model.DbSchema;
import giis.tdrules.openapi.model.SqlRules;
import giis.tdrules.openapi.model.SqlRulesBody;


/**
 * Client is autogenerated, only a trivial test to check the right endpoint is called
 */
public class TestClientApi {
	private static ClientAndServer mockServer=null;
	
	@BeforeClass
	public static void setUpClass() {
		mockServer = startClientAndServer(PortFactory.findFreePort());
	}
	@AfterClass
	public static void tearDownClass() throws SQLException {
		if (mockServer!=null) {
			stopQuietly(mockServer);
			mockServer=null;
		}
	}
	
	@Test
	public void testRules() {
		SqlRulesBody req = new SqlRulesBody().schema(new DbSchema().dbms("dbx")).sql("select 1").options("opt");
		SqlRules res = new SqlRules().rulesClass("rclass");
		TdRulesApi api=new TdRulesApi("http://127.0.0.1:" + mockServer.getPort() + "/api/v3");
		
		createExpectation("/rules", req, res);
		api.getRules(new DbSchema().dbms("dbx"), "select 1", "opt");
		
		createExpectation("/mutants", req, res);
		api.getMutants(new DbSchema().dbms("dbx"), "select 1", "opt");
	}
	private void createExpectation(String endpointPath, SqlRulesBody requestBody, SqlRules responseBody) {
		mockServer.when(request()
				.withPath("/api/v3" + endpointPath)
				.withBody(new JsonBody(new ModelJsonSerializer().serialize(requestBody, false))),
				exactly(1)
			).respond(response().withStatusCode(200)
				.withContentType(MediaType.APPLICATION_JSON)
				.withBody(new ModelJsonSerializer().serialize(responseBody, false))
		);
	}
			
}
