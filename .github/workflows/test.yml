name: test-all
on:
  push:
    branches-ignore:
      - 'dependabot/**' #avoid duplicates: only run the PR, not the commit
      - 'gh-pages' #github pages do not trigger all tests
    tags-ignore:
      - 'v*' #avoid rerun existing commit on release
  pull_request:
    branches:
      - 'main'

env:
  TEST_POSTGRES_PWD: ${RANDOM}${RANDOM}${RANDOM}
  #sqlserver must comply with password requirements (upper, lower, digit, symbol)
  TEST_SQLSERVER_PWD: ${RANDOM}Ax.${RANDOM}${RANDOM}
  TEST_ORACLE_PWD: ${RANDOM}${RANDOM}${RANDOM}
  TEST_SQLITE_PWD: ""

jobs:
  test-java:
    runs-on: ubuntu-latest
    #if: ${{ false }}  # disable for now
    strategy:
      matrix:
        scope: [Core, Postgres, Sqlserver, Oracle]
      fail-fast: false
      
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '8'
          cache: 'maven'

      # Starts the DBMS containers when applicable
      - name: Launch Postgres
        if: ${{ matrix.scope == 'Postgres' }}
        run: |
          docker run -d -p 5432:5432 --name test-postgres  --restart unless-stopped \
            -e POSTGRES_PASSWORD="$TEST_POSTGRES_PWD" \
            -e TEST_POSTGRES_PWD="$TEST_POSTGRES_PWD" \
            -v ${GITHUB_WORKSPACE}/setup/postgres:/docker-entrypoint-initdb.d \
            postgres:14
          chmod u+x setup/wait-container-ready.sh && ./setup/wait-container-ready.sh test-postgres "END SETUP!"

      - name: Launch Sqlserver
        if: ${{ matrix.scope == 'Sqlserver' }}
        run: |
          docker stop test-sqlserver && docker rm test-sqlserver
          docker run -d -p 1433:1433 --name test-sqlserver  --restart unless-stopped \
            -e SA_PASSWORD="$TEST_SQLSERVER_PWD" \
            -e TEST_SQLSERVER_PWD="$TEST_SQLSERVER_PWD" \
            -e "ACCEPT_EULA=Y" -e "MSSQL_PID=Developer" \
            -v ${GITHUB_WORKSPACE}/setup/sqlserver:/setup.d \
            mcr.microsoft.com/mssql/server:2017-latest
          chmod u+x setup/wait-container-ready.sh && ./setup/wait-container-ready.sh test-sqlserver "SQL Server is now ready for client connections"
          # SQLServer does not have an on startup script, run it now
          docker exec test-sqlserver bash -c "chmod u+x setup.d/sqlserver-setup.sh && ./setup.d/sqlserver-setup.sh"     
      
      - name: Launch Oracle
        if: ${{ matrix.scope == 'Oracle' }}
        run: |
          docker run -d -p 1521:1521 --name test-oracle  --restart unless-stopped \
            -e ORACLE_PASSWORD=$TEST_ORACLE_PWD \
            -e TEST_ORACLE_PWD="$TEST_ORACLE_PWD" \
            -v ${GITHUB_WORKSPACE}/setup/oracle:/container-entrypoint-initdb.d \
            gvenzl/oracle-xe:11.2.0.2-slim-faststart
          chmod u+x setup/wait-container-ready.sh && ./setup/wait-container-ready.sh test-oracle "DATABASE IS READY TO USE!"

      # Run the tests, a step for those that use a DBMS, other for core
      - name: Test and aggregate surefire report - ${{ matrix.scope }}
        if: ${{ matrix.scope == 'Core' }}
        run: >
          mvn test surefire-report:report -Daggregate=true
          -Dtest=!TestPostgres*,!TestSqlserver*,!TestOracle*
          -Dmaven.test.failure.ignore=true -U --no-transfer-progress

      - name: Test and aggregate surefire report - ${{ matrix.scope }}
        if: ${{ matrix.scope != 'Core' }}
        run: >
          mvn test surefire-report:report -Daggregate=true
          -Dtest=Test${{ matrix.scope }}* -pl tdrules-client-rdb,tdrules-store-rdb -am -Dsurefire.failIfNoSpecifiedTests=false
          -Dmaven.test.failure.ignore=true -U --no-transfer-progress
          -Duser.timezone=Europe/Madrid
        # NOTE: must specify a timezone to avoid oracle error ORA-01882: timezone region not found

      - name: Additional aggregated junit report
        uses: javiertuya/junit-report-action@v1
        with:
          surefire-files: "**/target/surefire-reports/TEST-*.xml"
          report-dir: target/site

      - name: Generate report checks
        if: always()
        uses: mikepenz/action-junit-report@v3.7.8
        with:
          check_name: "test-result-${{ matrix.scope }}"
          report_paths: "**/surefire-reports/TEST-*.xml"
          fail_on_failure: 'true'

      - if: always()
        name: Set unique jacoco.xml file names for each scope
        #if not sonarqube will overwrite al jacoco files generated for the same module but different scopes
        run: |
          for file in */target/site/jacoco/jacoco.xml ; do mv $file ${file//jacoco.xml/jacoco-${{ matrix.scope }}.xml} ; done
          ls -la */target/site/jacoco/*.xml

      - if: always()
        name: Publish test report files
        uses: actions/upload-artifact@v3
        with:
          name: "test-report-files-${{ matrix.scope }}"
          path: |
            target/site
            **/target/site/jacoco/jacoco*.xml
            **/target/surefire-reports

  sonarqube:
    needs: [test-java]
    #if: ${{ false }}  # disable for now
    #This job fails when comming from a dependabot PR (can't read the sonarqube token for security reasons).
    #Links to discussions and workaround at: https://github.com/giis-uniovi/samples-giis-template/issues/4
    if: ${{ github.actor != 'dependabot[bot]' }}
    runs-on: ubuntu-latest
    steps:
      - uses: javiertuya/sonarqube-action@v1.1.0
        with: 
          github-token: ${{ secrets.GITHUB_TOKEN }}
          sonar-token: ${{ secrets.SONAR_TOKEN }}
          restore-artifact-name1: "test-report-files-Core"
          restore-artifact-name2: "test-report-files-Sqlserver"
          restore-artifact-name3: "test-report-files-Postgres"
          restore-artifact-name4: "test-report-files-Oracle"

  publish-java-snapshot:
    #if: ${{ false }}  # disable for now
    #avoid publishing PRs and dependabot branches
    if: ${{ github.event_name != 'pull_request' && !contains('/head/refs/dependabot/', github.ref) }}
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - uses: javiertuya/branch-snapshots-action@v1.2.0
        with: 
          token: ${{ secrets.GITHUB_TOKEN }}
          java-version: '8'
          mvn-deploy-args: '-P publish-github -DskipTests=true -Dmaven.test.failure.ignore=false -U --no-transfer-progress'
          delete-old-snapshots: true
          min-snapshots-to-keep: 6
          always-keep-regex: "\\d*\\.\\d*\\.\\d*-main-SNAPSHOT$"
