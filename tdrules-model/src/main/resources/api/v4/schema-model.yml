# Models of the data store
# Notes on the type of objects:
# - Always set defaults to empty in primitive properties, to avoid null handling
# - Use strings for boolean, due to legacy reasons and to avoid manage nullable Boolean classes that openapi generator produces
# - (when needed, boolean functions are defined in the extension ITdSchemaExtension)
# - Use strings for enumerations, due to legacy reasons, to give more flexibility and an easier generation of .NET models
#   (when needed, constants are defined in code)
TdSchema:
  description: Represents the structure of the data store. 
  # x-implements vendor extensions are used to create custom extensions to the generated model classes via default methods in the interface
  x-implements: [giis.tdrules.model.ITdSchemaExtension]
  properties:
    catalog:
      type: string
      default: ""
      description: An optional logical namespace that can contain multiple schemas
        (e.g. the name of the database catalog as returned by JDBC in RDBMS)
    schema:
      type: string
      default: ""
      description: An optional name to uniquely identify the data store in a catalog
    storetype:
      type: string
      default: ""
      description: |
        A string representing the store type.
        It is used by the applications to handle the variability of different data stores:
        - In an RDB is the database vendor name returned by jdbc, eg. `postgres`, `oracle`, `sqlserver`
        - In OpenApi is the string `openapi`
    entities: 
      type: array
      description: The set of entities that compose this schema
      items:
        $ref: "#/TdEntity"

TdEntity:
  description: Represents a entity in the data store.
    To generate coverage rules, at least `name` must be specified 
  x-implements: [giis.tdrules.model.ITdEntityExtension]
  properties:
    name: 
      type: string
      default: ""
      description: The name of this entity
    entitytype:
      type: string
      default: ""
      description: |
        The type of this entity:
        - `table`: The entity is meant to store data
        - `array`: The entity represents the data stored by each item in a collection
        - `type`: The entity describes the structure of a composite object (object inside of another object)
        - `view`: The entity is a virtual table to present data stored in other entities
    subtype:
      type: string
      default: ""
      description: An optional modifier of the entity type
    extended:
      type: object
      description: A map of additional entity properties to store information required by other applications
      additionalProperties:
        type: string
    attributes: 
      type: array
      description: The collection with the attributes of this entity
      items:
        $ref: "#/TdAttribute"
    checks: 
      type: array
      description: The set of constraints that the attributes of this entity must satisfy
      items:
        $ref: "#/TdCheck"
    ddls: 
      type: array
      description: |
        Store type dependent operations to manipulate the data or the schema in the data store:
        - In RDB stores, it may include the statements to create or drop tables.
        - In openapi data stores, it may include the endpoints to post or delete objects.
      items:
        $ref: "#/Ddl"

TdAttribute:
  description: Represents an attribute in an entity. 
    To generate coverage rules, at least `name` and `dtype` must be specified 
  x-implements: [giis.tdrules.model.ITdAttributeExtension]
  properties:
    name:
      type: string
      default: ""
      description: The name of this attribute
    datatype:
      type: string
      default: ""
      description: The data type name of this attribute. 
    compositetype:
      type: string
      default: ""
      description: If the data type is not primitive this attibute holds `array` or `type`,
        NOTE, If this field is `array` then the `datatype` holds the type of each array item,
        If this field is `type` refers the an entity type
    subtype:
      type: string
      default: ""
      description: An optional modifier of the data type, 
        eg. given a `DATETIME WITH TIMEZONE` in an RDB, this field stores `WITH TIMEZONE` and the `datatype` field stores `DATETIME`
    size:
      type: string
      default: ""
      description: An optional size of the data type of this attribute.
        eg. given a `DECIMAL(10,2)` in a RDB, this field stores the value `10,2` 
    uid:
      type: string
      default: ""
      description: If this value is `true`, the column is the unique identifier (or part thereof) of the data stored
    autoincrement:
      type: string
      default: ""
      description: If this value is `true`, the value of the attribute is autogenerated in the backend when a new instance is created
    notnull:
      #TODO should the logic be inverted? (set to nullable)
      type: string
      default: ""
      description: If this value is `true`, the column is not nullable
    rid:
      type: string
      default: ""
      description: If this value is non empty, represents a reference to an attribute in another entity
        (e.g. foreign key in RDB).
        This value must be in the form `<entity-name>.<attribute-name>`
    ridname:
      type: string
      default: ""
      description: An optional name to refer this 'rid'
    checkin:
      type: string
      default: ""
      description: A list of allowed literals to constraint the possible values of this attribute,
        e.g. `'Y','N'` represents a field that can have only these two values
    defaultvalue:
      type: string
      default: ""
      description: If this value is non empty, indicates the default value applicable to this attribute
    extended:
      type: object
      description: A map of additional attribute properties to store information required by other applications
      additionalProperties:
        type: string

TdCheck:
  description: Represents a logical expression that constraint the allowed values of attributes in an entity
  required:
    - constraint
  properties:
    attribute:
      type: string
      default: ""
      description: The name of the attribute that constrained (if associated to only one)
    name:
      type: string
      default: ""
      description: An optional name to refer this constraint
    constraint:
      type: string
      default: ""
      description: The data store dependent constraint expression

Ddl:
  description: |
    Represents an operation to manipulate the data or the schema in a data store.
    This entity is store type dependent:
    - In RDB stores, the command is the type of statement (e.g. create, drop)
      and the query is the statement to modify the schema.
    - In openapi data stores, the command is the http method (e.g. post, put)
      and the query is the path (endpoint) where the command is to be executed.
  required:
    - command
    - query
  properties:
    command:
      type: string
      default: ""
      description: The operation to be executed
    query:
      type: string
      default: ""
      description: The statement or path where command is to be executed
      