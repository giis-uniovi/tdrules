#modelos del esquema de la base de datos
DbSchema:
  description: Represents the schema of the database. 
    The xml or json for the current database can be extracted using a jdbc connection
    with the [XDBSchema application](https://in2test.lsi.uniovi.es/sqltools/xdbschema)
  #to create custom extensions of generated model via default methods in the interface
  x-implements: [giis.tdrules.model.IDbSchemaExtension]
  xml:
    name: "schema"
  properties:
    catalog:
      type: string
      default: ""
      description: The name of the database catalog as returned by jdbc
    schema:
      type: string
      default: ""
      description: The name of the database schema as returned by jdbc
    dbms:
      type: string
      default: ""
      description: A string representing the database vendor name returned by jdbc, eg. `postgres`, `oracle`, `sqlserver`.
        To be used by applications to handle vendor specific database features
    tables: 
      type: array
      description: The set of tables included in this schema
      items:
        $ref: "#/DbTable"
DbTable:
  description: Represents a table in the database.
    To generate sql coverage rules, at least `name` must be specified 
  x-implements: [giis.tdrules.model.IDbTableExtension]
  xml:
    name: "table"
  properties:
    name: 
      type: string
      default: ""
      description: The name of this table
      xml:
        attribute: true
    tabletype: 
      type: string
      default: ""
      description: The type of this table as returned by jdbc, eg. `table`,`view`, `type`,
        NOTE, `type` tables hold User Defined Types (UDT), also called object, record or row (as named in SQL99)
      xml:
        attribute: true
    extended:
      type: object
      description: A map of additional table properties to store information required by other applications
      xml:
        attribute: true
      additionalProperties:
        type: string
        xml:
          attribute: true
    columns: 
      type: array
      description: The set of columns in this table
      items:
        $ref: "#/DbColumn"
    checks: 
      type: array
      description: The set of check constraints associated to the columns of this table
      items:
        $ref: "#/DbCheck"
    ddls: 
      type: array
      description: Sql statements (dml) to create and/or drop this table
        Used by applications that require manage the table included in this schema
      items:
        $ref: "#/Ddl"
DbColumn:
  description: Represents a column in a table. 
    To generate sql coverage rules, at least `name` and `datatype` must be specified 
  x-implements: [giis.tdrules.model.IDbColumnExtension]
  xml:
    name: 'column'
  properties:
    name:
      type: string
      default: ""
      description: The name of this column
      xml:
        attribute: true
    datatype:
      type: string
      default: ""
      description: The datatype of this column. 
        NOTE, the size of the type (scale), if defined, is stored in the `size` field,
        eg. given a `VARCHAR(10)`, this field stores `VARCHAR` and the `size` field stores `10` 
    compositetype:
      type: string
      default: ""
      description: If the datatype is not primitive this attibute holds `array` or `type`,
        NOTE, If this field is `array` then the `datatype` holds the type of each array item,
        If this field is `type` refers the UDT that must be defined in another table
    subtype:
      type: string
      default: ""
      description: A modifier of the datatype, 
        eg. given a `DATETIME WITH TIMEZONE`, this field stores `WITH TIMEZONE` and the datatype field stores `DATETIME`
    size:
      type: string
      default: ""
      description: The size of the datatype of this column.
        If the size is composed by precision and scale, both values must be separated by a comma,
        eg. given a `DECIMAL(10,2)`, this fiel stores the value `10,2` 
    key:
      type: string
      default: ""
      description: if this value is `true`, the column is part of the primary key
    autoincrement:
      type: string
      default: ""
      description: if this value is `true`, the value of the column is autogenerated when a new instance is created
    notnull:
      type: string
      default: ""
      description: if this value is `true`, the column is not nullable (declared with NOT NULL)
    fk:
      type: string
      default: ""
      description: If this value is non empty, represents the referenced column in a foreign key constraint.
        This value must be in the form `<table-name>.<column-name>`
    fkname:
      type: string
      default: ""
      description: The foreign constrain name as determined by jdbc
    checkin:
      type: string
      default: ""
      description: If the check constraint applicable to this column specifies a list of allowed literals,
        this field may indicate the set of comma separated allowed values, 
        eg. `'Y','N'` represents a fied that can have only these two values
    defaultvalue:
      type: string
      default: ""
      description: The default value applicable to this column
    extended:
      type: object
      description: A map of additional column properties to store information required by other applications
      xml:
        attribute: true
      additionalProperties:
        type: string
        xml:
          attribute: true
DbCheck:
  description: Represents a constraints associated to a table
  xml:
    name: "check"
  required:
    - constraint
  properties:
    column:
      type: string
      default: ""
      description: The name of the column that has this constraint (if associated to only one column)
    name:
      type: string
      default: ""
      description: The name constraint as determined by jdbc
    constraint:
      type: string
      default: ""
      description: The constraint expression as determined by jdbc
Ddl:
  description: Represents a sql statement (dml) to create and/or drop this table
  xml:
    name: "ddl"
  required:
    - command
    - sql
  properties:
    command:
      type: string
      default: ""
      description: Indicates the kind of update to perform (`create` or `drop`)
    sql:
      type: string
      default: ""
      description: The sql to execute the update indicated by `command`
