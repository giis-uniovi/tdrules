/*
 * TdRules API - Test Data Coverage Evaluation
 *
 * A set of services to evaluate the coverage of test data.  Coverage criteria are implemented in a set of rules, that when evaluated with respect to a given data store determine the coverage of the data store with respect to the query. Two kind of coverage rules are generated, Full Predicate Coverage (FPC) Rules and SQL Mutants. 
 *
 * The version of the OpenAPI document: 4.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Giis.Tdrules.Openapi.Client;
using Giis.Tdrules.Openapi.Model;

namespace Giis.Tdrules.Openapi.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITdRulesApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Healthcheck entry point
        /// </summary>
        /// <exception cref="Giis.Tdrules.Openapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>string</returns>
        string HealthcheckGet(int operationIndex = 0);

        /// <summary>
        /// Healthcheck entry point
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Giis.Tdrules.Openapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> HealthcheckGetWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// Gets the set of mutants for a given SQL (SQLMutation). Only available for relational databases. Each rule is a mutant of the original SQL query. The mutant is dead (i.e. the rule is covered) if the execution against the database returns the same rows than the original query.
        /// </summary>
        /// <exception cref="Giis.Tdrules.Openapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tdRulesBody">An object that includes the SQL query, schema and an optional string with parameters</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TdRules</returns>
        TdRules MutantsPost(TdRulesBody tdRulesBody, int operationIndex = 0);

        /// <summary>
        /// Gets the set of mutants for a given SQL (SQLMutation). Only available for relational databases. Each rule is a mutant of the original SQL query. The mutant is dead (i.e. the rule is covered) if the execution against the database returns the same rows than the original query.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Giis.Tdrules.Openapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tdRulesBody">An object that includes the SQL query, schema and an optional string with parameters</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TdRules</returns>
        ApiResponse<TdRules> MutantsPostWithHttpInfo(TdRulesBody tdRulesBody, int operationIndex = 0);
        /// <summary>
        /// Gets the set of entities referenced in a query
        /// </summary>
        /// <exception cref="Giis.Tdrules.Openapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">An object that includes the query to be processed (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>QueryEntitiesBody</returns>
        QueryEntitiesBody QueryEntitiesPost(string body = default(string), int operationIndex = 0);

        /// <summary>
        /// Gets the set of entities referenced in a query
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Giis.Tdrules.Openapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">An object that includes the query to be processed (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of QueryEntitiesBody</returns>
        ApiResponse<QueryEntitiesBody> QueryEntitiesPostWithHttpInfo(string body = default(string), int operationIndex = 0);
        /// <summary>
        /// Transforms a non parametrized query into a parametrized one by converting each literal into a parameter and returns the mapping parameter-values
        /// </summary>
        /// <exception cref="Giis.Tdrules.Openapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">An object that includes the query to be processed (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>QueryParametersBody</returns>
        QueryParametersBody QueryParametersPost(string body = default(string), int operationIndex = 0);

        /// <summary>
        /// Transforms a non parametrized query into a parametrized one by converting each literal into a parameter and returns the mapping parameter-values
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Giis.Tdrules.Openapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">An object that includes the query to be processed (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of QueryParametersBody</returns>
        ApiResponse<QueryParametersBody> QueryParametersPostWithHttpInfo(string body = default(string), int operationIndex = 0);
        /// <summary>
        /// Gets the FPC rules for a given query. Based on Modified Condition Decision Coverage (MCDC) for SQL.  Each rule is a SQL-like statement that is covered if the execution against the data store returns at least one item. Query syntax depends on the underlying schema:  - For RDB schemas is a full fledged SQL,  - For OpenApi schemas is a variant of SQL called Test Data Specification (TDS) 
        /// </summary>
        /// <exception cref="Giis.Tdrules.Openapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tdRulesBody">An object that includes the query, schema and an optional string with parameters</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TdRules</returns>
        TdRules RulesPost(TdRulesBody tdRulesBody, int operationIndex = 0);

        /// <summary>
        /// Gets the FPC rules for a given query. Based on Modified Condition Decision Coverage (MCDC) for SQL.  Each rule is a SQL-like statement that is covered if the execution against the data store returns at least one item. Query syntax depends on the underlying schema:  - For RDB schemas is a full fledged SQL,  - For OpenApi schemas is a variant of SQL called Test Data Specification (TDS) 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Giis.Tdrules.Openapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tdRulesBody">An object that includes the query, schema and an optional string with parameters</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TdRules</returns>
        ApiResponse<TdRules> RulesPostWithHttpInfo(TdRulesBody tdRulesBody, int operationIndex = 0);
        /// <summary>
        /// Returns information about the version and environment of the service
        /// </summary>
        /// <exception cref="Giis.Tdrules.Openapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>VersionBody</returns>
        VersionBody VersionGet(int operationIndex = 0);

        /// <summary>
        /// Returns information about the version and environment of the service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Giis.Tdrules.Openapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of VersionBody</returns>
        ApiResponse<VersionBody> VersionGetWithHttpInfo(int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITdRulesApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Healthcheck entry point
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Giis.Tdrules.Openapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> HealthcheckGetAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Healthcheck entry point
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Giis.Tdrules.Openapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> HealthcheckGetWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Gets the set of mutants for a given SQL (SQLMutation). Only available for relational databases. Each rule is a mutant of the original SQL query. The mutant is dead (i.e. the rule is covered) if the execution against the database returns the same rows than the original query.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Giis.Tdrules.Openapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tdRulesBody">An object that includes the SQL query, schema and an optional string with parameters</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TdRules</returns>
        System.Threading.Tasks.Task<TdRules> MutantsPostAsync(TdRulesBody tdRulesBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Gets the set of mutants for a given SQL (SQLMutation). Only available for relational databases. Each rule is a mutant of the original SQL query. The mutant is dead (i.e. the rule is covered) if the execution against the database returns the same rows than the original query.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Giis.Tdrules.Openapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tdRulesBody">An object that includes the SQL query, schema and an optional string with parameters</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TdRules)</returns>
        System.Threading.Tasks.Task<ApiResponse<TdRules>> MutantsPostWithHttpInfoAsync(TdRulesBody tdRulesBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Gets the set of entities referenced in a query
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Giis.Tdrules.Openapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">An object that includes the query to be processed (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of QueryEntitiesBody</returns>
        System.Threading.Tasks.Task<QueryEntitiesBody> QueryEntitiesPostAsync(string body = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Gets the set of entities referenced in a query
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Giis.Tdrules.Openapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">An object that includes the query to be processed (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (QueryEntitiesBody)</returns>
        System.Threading.Tasks.Task<ApiResponse<QueryEntitiesBody>> QueryEntitiesPostWithHttpInfoAsync(string body = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Transforms a non parametrized query into a parametrized one by converting each literal into a parameter and returns the mapping parameter-values
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Giis.Tdrules.Openapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">An object that includes the query to be processed (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of QueryParametersBody</returns>
        System.Threading.Tasks.Task<QueryParametersBody> QueryParametersPostAsync(string body = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Transforms a non parametrized query into a parametrized one by converting each literal into a parameter and returns the mapping parameter-values
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Giis.Tdrules.Openapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">An object that includes the query to be processed (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (QueryParametersBody)</returns>
        System.Threading.Tasks.Task<ApiResponse<QueryParametersBody>> QueryParametersPostWithHttpInfoAsync(string body = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Gets the FPC rules for a given query. Based on Modified Condition Decision Coverage (MCDC) for SQL.  Each rule is a SQL-like statement that is covered if the execution against the data store returns at least one item. Query syntax depends on the underlying schema:  - For RDB schemas is a full fledged SQL,  - For OpenApi schemas is a variant of SQL called Test Data Specification (TDS) 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Giis.Tdrules.Openapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tdRulesBody">An object that includes the query, schema and an optional string with parameters</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TdRules</returns>
        System.Threading.Tasks.Task<TdRules> RulesPostAsync(TdRulesBody tdRulesBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Gets the FPC rules for a given query. Based on Modified Condition Decision Coverage (MCDC) for SQL.  Each rule is a SQL-like statement that is covered if the execution against the data store returns at least one item. Query syntax depends on the underlying schema:  - For RDB schemas is a full fledged SQL,  - For OpenApi schemas is a variant of SQL called Test Data Specification (TDS) 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Giis.Tdrules.Openapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tdRulesBody">An object that includes the query, schema and an optional string with parameters</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TdRules)</returns>
        System.Threading.Tasks.Task<ApiResponse<TdRules>> RulesPostWithHttpInfoAsync(TdRulesBody tdRulesBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Returns information about the version and environment of the service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Giis.Tdrules.Openapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of VersionBody</returns>
        System.Threading.Tasks.Task<VersionBody> VersionGetAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Returns information about the version and environment of the service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Giis.Tdrules.Openapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (VersionBody)</returns>
        System.Threading.Tasks.Task<ApiResponse<VersionBody>> VersionGetWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITdRulesApi : ITdRulesApiSync, ITdRulesApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class TdRulesApi : ITdRulesApi
    {
        private Giis.Tdrules.Openapi.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="TdRulesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public TdRulesApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TdRulesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public TdRulesApi(string basePath)
        {
            this.Configuration = Giis.Tdrules.Openapi.Client.Configuration.MergeConfigurations(
                Giis.Tdrules.Openapi.Client.GlobalConfiguration.Instance,
                new Giis.Tdrules.Openapi.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Giis.Tdrules.Openapi.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Giis.Tdrules.Openapi.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Giis.Tdrules.Openapi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TdRulesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public TdRulesApi(Giis.Tdrules.Openapi.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Giis.Tdrules.Openapi.Client.Configuration.MergeConfigurations(
                Giis.Tdrules.Openapi.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Giis.Tdrules.Openapi.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Giis.Tdrules.Openapi.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Giis.Tdrules.Openapi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TdRulesApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public TdRulesApi(Giis.Tdrules.Openapi.Client.ISynchronousClient client, Giis.Tdrules.Openapi.Client.IAsynchronousClient asyncClient, Giis.Tdrules.Openapi.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Giis.Tdrules.Openapi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Giis.Tdrules.Openapi.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Giis.Tdrules.Openapi.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Giis.Tdrules.Openapi.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Giis.Tdrules.Openapi.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Healthcheck entry point 
        /// </summary>
        /// <exception cref="Giis.Tdrules.Openapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>string</returns>
        public string HealthcheckGet(int operationIndex = 0)
        {
            Giis.Tdrules.Openapi.Client.ApiResponse<string> localVarResponse = HealthcheckGetWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Healthcheck entry point 
        /// </summary>
        /// <exception cref="Giis.Tdrules.Openapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of string</returns>
        public Giis.Tdrules.Openapi.Client.ApiResponse<string> HealthcheckGetWithHttpInfo(int operationIndex = 0)
        {
            Giis.Tdrules.Openapi.Client.RequestOptions localVarRequestOptions = new Giis.Tdrules.Openapi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain"
            };

            var localVarContentType = Giis.Tdrules.Openapi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Giis.Tdrules.Openapi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "TdRulesApi.HealthcheckGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<string>("/healthcheck", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("HealthcheckGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Healthcheck entry point 
        /// </summary>
        /// <exception cref="Giis.Tdrules.Openapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> HealthcheckGetAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Giis.Tdrules.Openapi.Client.ApiResponse<string> localVarResponse = await HealthcheckGetWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Healthcheck entry point 
        /// </summary>
        /// <exception cref="Giis.Tdrules.Openapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<Giis.Tdrules.Openapi.Client.ApiResponse<string>> HealthcheckGetWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Giis.Tdrules.Openapi.Client.RequestOptions localVarRequestOptions = new Giis.Tdrules.Openapi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain"
            };

            var localVarContentType = Giis.Tdrules.Openapi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Giis.Tdrules.Openapi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "TdRulesApi.HealthcheckGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<string>("/healthcheck", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("HealthcheckGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Gets the set of mutants for a given SQL (SQLMutation). Only available for relational databases. Each rule is a mutant of the original SQL query. The mutant is dead (i.e. the rule is covered) if the execution against the database returns the same rows than the original query. 
        /// </summary>
        /// <exception cref="Giis.Tdrules.Openapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tdRulesBody">An object that includes the SQL query, schema and an optional string with parameters</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TdRules</returns>
        public TdRules MutantsPost(TdRulesBody tdRulesBody, int operationIndex = 0)
        {
            Giis.Tdrules.Openapi.Client.ApiResponse<TdRules> localVarResponse = MutantsPostWithHttpInfo(tdRulesBody);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the set of mutants for a given SQL (SQLMutation). Only available for relational databases. Each rule is a mutant of the original SQL query. The mutant is dead (i.e. the rule is covered) if the execution against the database returns the same rows than the original query. 
        /// </summary>
        /// <exception cref="Giis.Tdrules.Openapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tdRulesBody">An object that includes the SQL query, schema and an optional string with parameters</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TdRules</returns>
        public Giis.Tdrules.Openapi.Client.ApiResponse<TdRules> MutantsPostWithHttpInfo(TdRulesBody tdRulesBody, int operationIndex = 0)
        {
            // verify the required parameter 'tdRulesBody' is set
            if (tdRulesBody == null)
            {
                throw new Giis.Tdrules.Openapi.Client.ApiException(400, "Missing required parameter 'tdRulesBody' when calling TdRulesApi->MutantsPost");
            }

            Giis.Tdrules.Openapi.Client.RequestOptions localVarRequestOptions = new Giis.Tdrules.Openapi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json; charset=utf-8"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Giis.Tdrules.Openapi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Giis.Tdrules.Openapi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = tdRulesBody;

            localVarRequestOptions.Operation = "TdRulesApi.MutantsPost";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<TdRules>("/mutants", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("MutantsPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Gets the set of mutants for a given SQL (SQLMutation). Only available for relational databases. Each rule is a mutant of the original SQL query. The mutant is dead (i.e. the rule is covered) if the execution against the database returns the same rows than the original query. 
        /// </summary>
        /// <exception cref="Giis.Tdrules.Openapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tdRulesBody">An object that includes the SQL query, schema and an optional string with parameters</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TdRules</returns>
        public async System.Threading.Tasks.Task<TdRules> MutantsPostAsync(TdRulesBody tdRulesBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Giis.Tdrules.Openapi.Client.ApiResponse<TdRules> localVarResponse = await MutantsPostWithHttpInfoAsync(tdRulesBody, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the set of mutants for a given SQL (SQLMutation). Only available for relational databases. Each rule is a mutant of the original SQL query. The mutant is dead (i.e. the rule is covered) if the execution against the database returns the same rows than the original query. 
        /// </summary>
        /// <exception cref="Giis.Tdrules.Openapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tdRulesBody">An object that includes the SQL query, schema and an optional string with parameters</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TdRules)</returns>
        public async System.Threading.Tasks.Task<Giis.Tdrules.Openapi.Client.ApiResponse<TdRules>> MutantsPostWithHttpInfoAsync(TdRulesBody tdRulesBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'tdRulesBody' is set
            if (tdRulesBody == null)
            {
                throw new Giis.Tdrules.Openapi.Client.ApiException(400, "Missing required parameter 'tdRulesBody' when calling TdRulesApi->MutantsPost");
            }


            Giis.Tdrules.Openapi.Client.RequestOptions localVarRequestOptions = new Giis.Tdrules.Openapi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json; charset=utf-8"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Giis.Tdrules.Openapi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Giis.Tdrules.Openapi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = tdRulesBody;

            localVarRequestOptions.Operation = "TdRulesApi.MutantsPost";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<TdRules>("/mutants", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("MutantsPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Gets the set of entities referenced in a query 
        /// </summary>
        /// <exception cref="Giis.Tdrules.Openapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">An object that includes the query to be processed (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>QueryEntitiesBody</returns>
        public QueryEntitiesBody QueryEntitiesPost(string body = default(string), int operationIndex = 0)
        {
            Giis.Tdrules.Openapi.Client.ApiResponse<QueryEntitiesBody> localVarResponse = QueryEntitiesPostWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the set of entities referenced in a query 
        /// </summary>
        /// <exception cref="Giis.Tdrules.Openapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">An object that includes the query to be processed (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of QueryEntitiesBody</returns>
        public Giis.Tdrules.Openapi.Client.ApiResponse<QueryEntitiesBody> QueryEntitiesPostWithHttpInfo(string body = default(string), int operationIndex = 0)
        {
            Giis.Tdrules.Openapi.Client.RequestOptions localVarRequestOptions = new Giis.Tdrules.Openapi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json; charset=utf-8"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Giis.Tdrules.Openapi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Giis.Tdrules.Openapi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "TdRulesApi.QueryEntitiesPost";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<QueryEntitiesBody>("/query/entities", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("QueryEntitiesPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Gets the set of entities referenced in a query 
        /// </summary>
        /// <exception cref="Giis.Tdrules.Openapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">An object that includes the query to be processed (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of QueryEntitiesBody</returns>
        public async System.Threading.Tasks.Task<QueryEntitiesBody> QueryEntitiesPostAsync(string body = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Giis.Tdrules.Openapi.Client.ApiResponse<QueryEntitiesBody> localVarResponse = await QueryEntitiesPostWithHttpInfoAsync(body, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the set of entities referenced in a query 
        /// </summary>
        /// <exception cref="Giis.Tdrules.Openapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">An object that includes the query to be processed (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (QueryEntitiesBody)</returns>
        public async System.Threading.Tasks.Task<Giis.Tdrules.Openapi.Client.ApiResponse<QueryEntitiesBody>> QueryEntitiesPostWithHttpInfoAsync(string body = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Giis.Tdrules.Openapi.Client.RequestOptions localVarRequestOptions = new Giis.Tdrules.Openapi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json; charset=utf-8"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Giis.Tdrules.Openapi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Giis.Tdrules.Openapi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "TdRulesApi.QueryEntitiesPost";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<QueryEntitiesBody>("/query/entities", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("QueryEntitiesPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Transforms a non parametrized query into a parametrized one by converting each literal into a parameter and returns the mapping parameter-values 
        /// </summary>
        /// <exception cref="Giis.Tdrules.Openapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">An object that includes the query to be processed (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>QueryParametersBody</returns>
        public QueryParametersBody QueryParametersPost(string body = default(string), int operationIndex = 0)
        {
            Giis.Tdrules.Openapi.Client.ApiResponse<QueryParametersBody> localVarResponse = QueryParametersPostWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Transforms a non parametrized query into a parametrized one by converting each literal into a parameter and returns the mapping parameter-values 
        /// </summary>
        /// <exception cref="Giis.Tdrules.Openapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">An object that includes the query to be processed (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of QueryParametersBody</returns>
        public Giis.Tdrules.Openapi.Client.ApiResponse<QueryParametersBody> QueryParametersPostWithHttpInfo(string body = default(string), int operationIndex = 0)
        {
            Giis.Tdrules.Openapi.Client.RequestOptions localVarRequestOptions = new Giis.Tdrules.Openapi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json; charset=utf-8"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Giis.Tdrules.Openapi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Giis.Tdrules.Openapi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "TdRulesApi.QueryParametersPost";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<QueryParametersBody>("/query/parameters", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("QueryParametersPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Transforms a non parametrized query into a parametrized one by converting each literal into a parameter and returns the mapping parameter-values 
        /// </summary>
        /// <exception cref="Giis.Tdrules.Openapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">An object that includes the query to be processed (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of QueryParametersBody</returns>
        public async System.Threading.Tasks.Task<QueryParametersBody> QueryParametersPostAsync(string body = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Giis.Tdrules.Openapi.Client.ApiResponse<QueryParametersBody> localVarResponse = await QueryParametersPostWithHttpInfoAsync(body, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Transforms a non parametrized query into a parametrized one by converting each literal into a parameter and returns the mapping parameter-values 
        /// </summary>
        /// <exception cref="Giis.Tdrules.Openapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">An object that includes the query to be processed (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (QueryParametersBody)</returns>
        public async System.Threading.Tasks.Task<Giis.Tdrules.Openapi.Client.ApiResponse<QueryParametersBody>> QueryParametersPostWithHttpInfoAsync(string body = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Giis.Tdrules.Openapi.Client.RequestOptions localVarRequestOptions = new Giis.Tdrules.Openapi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json; charset=utf-8"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Giis.Tdrules.Openapi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Giis.Tdrules.Openapi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "TdRulesApi.QueryParametersPost";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<QueryParametersBody>("/query/parameters", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("QueryParametersPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Gets the FPC rules for a given query. Based on Modified Condition Decision Coverage (MCDC) for SQL.  Each rule is a SQL-like statement that is covered if the execution against the data store returns at least one item. Query syntax depends on the underlying schema:  - For RDB schemas is a full fledged SQL,  - For OpenApi schemas is a variant of SQL called Test Data Specification (TDS)  
        /// </summary>
        /// <exception cref="Giis.Tdrules.Openapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tdRulesBody">An object that includes the query, schema and an optional string with parameters</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TdRules</returns>
        public TdRules RulesPost(TdRulesBody tdRulesBody, int operationIndex = 0)
        {
            Giis.Tdrules.Openapi.Client.ApiResponse<TdRules> localVarResponse = RulesPostWithHttpInfo(tdRulesBody);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the FPC rules for a given query. Based on Modified Condition Decision Coverage (MCDC) for SQL.  Each rule is a SQL-like statement that is covered if the execution against the data store returns at least one item. Query syntax depends on the underlying schema:  - For RDB schemas is a full fledged SQL,  - For OpenApi schemas is a variant of SQL called Test Data Specification (TDS)  
        /// </summary>
        /// <exception cref="Giis.Tdrules.Openapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tdRulesBody">An object that includes the query, schema and an optional string with parameters</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TdRules</returns>
        public Giis.Tdrules.Openapi.Client.ApiResponse<TdRules> RulesPostWithHttpInfo(TdRulesBody tdRulesBody, int operationIndex = 0)
        {
            // verify the required parameter 'tdRulesBody' is set
            if (tdRulesBody == null)
            {
                throw new Giis.Tdrules.Openapi.Client.ApiException(400, "Missing required parameter 'tdRulesBody' when calling TdRulesApi->RulesPost");
            }

            Giis.Tdrules.Openapi.Client.RequestOptions localVarRequestOptions = new Giis.Tdrules.Openapi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json; charset=utf-8"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Giis.Tdrules.Openapi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Giis.Tdrules.Openapi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = tdRulesBody;

            localVarRequestOptions.Operation = "TdRulesApi.RulesPost";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<TdRules>("/rules", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RulesPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Gets the FPC rules for a given query. Based on Modified Condition Decision Coverage (MCDC) for SQL.  Each rule is a SQL-like statement that is covered if the execution against the data store returns at least one item. Query syntax depends on the underlying schema:  - For RDB schemas is a full fledged SQL,  - For OpenApi schemas is a variant of SQL called Test Data Specification (TDS)  
        /// </summary>
        /// <exception cref="Giis.Tdrules.Openapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tdRulesBody">An object that includes the query, schema and an optional string with parameters</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TdRules</returns>
        public async System.Threading.Tasks.Task<TdRules> RulesPostAsync(TdRulesBody tdRulesBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Giis.Tdrules.Openapi.Client.ApiResponse<TdRules> localVarResponse = await RulesPostWithHttpInfoAsync(tdRulesBody, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the FPC rules for a given query. Based on Modified Condition Decision Coverage (MCDC) for SQL.  Each rule is a SQL-like statement that is covered if the execution against the data store returns at least one item. Query syntax depends on the underlying schema:  - For RDB schemas is a full fledged SQL,  - For OpenApi schemas is a variant of SQL called Test Data Specification (TDS)  
        /// </summary>
        /// <exception cref="Giis.Tdrules.Openapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tdRulesBody">An object that includes the query, schema and an optional string with parameters</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TdRules)</returns>
        public async System.Threading.Tasks.Task<Giis.Tdrules.Openapi.Client.ApiResponse<TdRules>> RulesPostWithHttpInfoAsync(TdRulesBody tdRulesBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'tdRulesBody' is set
            if (tdRulesBody == null)
            {
                throw new Giis.Tdrules.Openapi.Client.ApiException(400, "Missing required parameter 'tdRulesBody' when calling TdRulesApi->RulesPost");
            }


            Giis.Tdrules.Openapi.Client.RequestOptions localVarRequestOptions = new Giis.Tdrules.Openapi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json; charset=utf-8"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Giis.Tdrules.Openapi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Giis.Tdrules.Openapi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = tdRulesBody;

            localVarRequestOptions.Operation = "TdRulesApi.RulesPost";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<TdRules>("/rules", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RulesPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns information about the version and environment of the service 
        /// </summary>
        /// <exception cref="Giis.Tdrules.Openapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>VersionBody</returns>
        public VersionBody VersionGet(int operationIndex = 0)
        {
            Giis.Tdrules.Openapi.Client.ApiResponse<VersionBody> localVarResponse = VersionGetWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns information about the version and environment of the service 
        /// </summary>
        /// <exception cref="Giis.Tdrules.Openapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of VersionBody</returns>
        public Giis.Tdrules.Openapi.Client.ApiResponse<VersionBody> VersionGetWithHttpInfo(int operationIndex = 0)
        {
            Giis.Tdrules.Openapi.Client.RequestOptions localVarRequestOptions = new Giis.Tdrules.Openapi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Giis.Tdrules.Openapi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Giis.Tdrules.Openapi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "TdRulesApi.VersionGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<VersionBody>("/version", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("VersionGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns information about the version and environment of the service 
        /// </summary>
        /// <exception cref="Giis.Tdrules.Openapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of VersionBody</returns>
        public async System.Threading.Tasks.Task<VersionBody> VersionGetAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Giis.Tdrules.Openapi.Client.ApiResponse<VersionBody> localVarResponse = await VersionGetWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns information about the version and environment of the service 
        /// </summary>
        /// <exception cref="Giis.Tdrules.Openapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (VersionBody)</returns>
        public async System.Threading.Tasks.Task<Giis.Tdrules.Openapi.Client.ApiResponse<VersionBody>> VersionGetWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Giis.Tdrules.Openapi.Client.RequestOptions localVarRequestOptions = new Giis.Tdrules.Openapi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Giis.Tdrules.Openapi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Giis.Tdrules.Openapi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "TdRulesApi.VersionGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<VersionBody>("/version", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("VersionGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
