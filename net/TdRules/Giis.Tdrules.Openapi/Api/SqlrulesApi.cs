/*
 * SQLRules API - Evaluation of test coverage for SQL database queries
 *
 * A set of services to evaluate the coverage of SQL database queries. Coverage criteria are implemented in a set of rules, that when evaluated with respect to a given database determine the coverage of the database with respect to the query. Two kind of coverage rules are generated, Full Predicate Coverage rules for SQL (SQLFpc) and Mutants for SQL (SQLMutation)
 *
 * The version of the OpenAPI document: 3.1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Giis.Tdrules.Openapi.Client;
using Giis.Tdrules.Openapi.Model;

namespace Giis.Tdrules.Openapi.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISqlrulesApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Healthcheck entry point
        /// </summary>
        /// <exception cref="Giis.Tdrules.Openapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>string</returns>
        string HealthcheckGet(int operationIndex = 0);

        /// <summary>
        /// Healthcheck entry point
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Giis.Tdrules.Openapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> HealthcheckGetWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// Gets the set of mutants for a given sql (SQLMutation). Each rule is a mutant of the original SQL query. The mutant is dead (i.e. the rule is covered) if the execution against the database returns the same rows than the original query.
        /// </summary>
        /// <exception cref="Giis.Tdrules.Openapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sqlRulesBody">An object that includes the sql, schema and an optional string with parameters</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SqlRules</returns>
        SqlRules MutantsPost(SqlRulesBody sqlRulesBody, int operationIndex = 0);

        /// <summary>
        /// Gets the set of mutants for a given sql (SQLMutation). Each rule is a mutant of the original SQL query. The mutant is dead (i.e. the rule is covered) if the execution against the database returns the same rows than the original query.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Giis.Tdrules.Openapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sqlRulesBody">An object that includes the sql, schema and an optional string with parameters</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SqlRules</returns>
        ApiResponse<SqlRules> MutantsPostWithHttpInfo(SqlRulesBody sqlRulesBody, int operationIndex = 0);
        /// <summary>
        /// Gets the SQLFpc coverage rules for a given sql. Based on Modified Condition Decision Coverage (MCDC) for SQL. Each rule is an SQL statement that is covered if the execution against the database returns at least one row.
        /// </summary>
        /// <exception cref="Giis.Tdrules.Openapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sqlRulesBody">An object that includes the sql, schema and an optional string with parameters</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SqlRules</returns>
        SqlRules RulesPost(SqlRulesBody sqlRulesBody, int operationIndex = 0);

        /// <summary>
        /// Gets the SQLFpc coverage rules for a given sql. Based on Modified Condition Decision Coverage (MCDC) for SQL. Each rule is an SQL statement that is covered if the execution against the database returns at least one row.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Giis.Tdrules.Openapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sqlRulesBody">An object that includes the sql, schema and an optional string with parameters</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SqlRules</returns>
        ApiResponse<SqlRules> RulesPostWithHttpInfo(SqlRulesBody sqlRulesBody, int operationIndex = 0);
        /// <summary>
        /// Transforms a non parametrized query into a parametrized one by converting each literal into a parameter and returns the mapping parameter-values
        /// </summary>
        /// <exception cref="Giis.Tdrules.Openapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">An object that includes the sql to be processed (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SqlParametersBody</returns>
        SqlParametersBody SqlParametersPost(string body = default(string), int operationIndex = 0);

        /// <summary>
        /// Transforms a non parametrized query into a parametrized one by converting each literal into a parameter and returns the mapping parameter-values
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Giis.Tdrules.Openapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">An object that includes the sql to be processed (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SqlParametersBody</returns>
        ApiResponse<SqlParametersBody> SqlParametersPostWithHttpInfo(string body = default(string), int operationIndex = 0);
        /// <summary>
        /// Gets the set of tables referenced in a sql query
        /// </summary>
        /// <exception cref="Giis.Tdrules.Openapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">An object that includes the sql to be processed (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SqlTableListBody</returns>
        SqlTableListBody SqlTablesPost(string body = default(string), int operationIndex = 0);

        /// <summary>
        /// Gets the set of tables referenced in a sql query
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Giis.Tdrules.Openapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">An object that includes the sql to be processed (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SqlTableListBody</returns>
        ApiResponse<SqlTableListBody> SqlTablesPostWithHttpInfo(string body = default(string), int operationIndex = 0);
        /// <summary>
        /// DEPRECATED - Gets the set of tables referenced in a sql query
        /// </summary>
        /// <exception cref="Giis.Tdrules.Openapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">An object that includes the sql to be processed (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SqlTableListBody</returns>
        [Obsolete]
        SqlTableListBody TablesPost(string body = default(string), int operationIndex = 0);

        /// <summary>
        /// DEPRECATED - Gets the set of tables referenced in a sql query
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Giis.Tdrules.Openapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">An object that includes the sql to be processed (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SqlTableListBody</returns>
        [Obsolete]
        ApiResponse<SqlTableListBody> TablesPostWithHttpInfo(string body = default(string), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISqlrulesApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Healthcheck entry point
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Giis.Tdrules.Openapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> HealthcheckGetAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Healthcheck entry point
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Giis.Tdrules.Openapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> HealthcheckGetWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Gets the set of mutants for a given sql (SQLMutation). Each rule is a mutant of the original SQL query. The mutant is dead (i.e. the rule is covered) if the execution against the database returns the same rows than the original query.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Giis.Tdrules.Openapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sqlRulesBody">An object that includes the sql, schema and an optional string with parameters</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SqlRules</returns>
        System.Threading.Tasks.Task<SqlRules> MutantsPostAsync(SqlRulesBody sqlRulesBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Gets the set of mutants for a given sql (SQLMutation). Each rule is a mutant of the original SQL query. The mutant is dead (i.e. the rule is covered) if the execution against the database returns the same rows than the original query.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Giis.Tdrules.Openapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sqlRulesBody">An object that includes the sql, schema and an optional string with parameters</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SqlRules)</returns>
        System.Threading.Tasks.Task<ApiResponse<SqlRules>> MutantsPostWithHttpInfoAsync(SqlRulesBody sqlRulesBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Gets the SQLFpc coverage rules for a given sql. Based on Modified Condition Decision Coverage (MCDC) for SQL. Each rule is an SQL statement that is covered if the execution against the database returns at least one row.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Giis.Tdrules.Openapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sqlRulesBody">An object that includes the sql, schema and an optional string with parameters</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SqlRules</returns>
        System.Threading.Tasks.Task<SqlRules> RulesPostAsync(SqlRulesBody sqlRulesBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Gets the SQLFpc coverage rules for a given sql. Based on Modified Condition Decision Coverage (MCDC) for SQL. Each rule is an SQL statement that is covered if the execution against the database returns at least one row.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Giis.Tdrules.Openapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sqlRulesBody">An object that includes the sql, schema and an optional string with parameters</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SqlRules)</returns>
        System.Threading.Tasks.Task<ApiResponse<SqlRules>> RulesPostWithHttpInfoAsync(SqlRulesBody sqlRulesBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Transforms a non parametrized query into a parametrized one by converting each literal into a parameter and returns the mapping parameter-values
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Giis.Tdrules.Openapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">An object that includes the sql to be processed (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SqlParametersBody</returns>
        System.Threading.Tasks.Task<SqlParametersBody> SqlParametersPostAsync(string body = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Transforms a non parametrized query into a parametrized one by converting each literal into a parameter and returns the mapping parameter-values
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Giis.Tdrules.Openapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">An object that includes the sql to be processed (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SqlParametersBody)</returns>
        System.Threading.Tasks.Task<ApiResponse<SqlParametersBody>> SqlParametersPostWithHttpInfoAsync(string body = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Gets the set of tables referenced in a sql query
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Giis.Tdrules.Openapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">An object that includes the sql to be processed (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SqlTableListBody</returns>
        System.Threading.Tasks.Task<SqlTableListBody> SqlTablesPostAsync(string body = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Gets the set of tables referenced in a sql query
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Giis.Tdrules.Openapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">An object that includes the sql to be processed (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SqlTableListBody)</returns>
        System.Threading.Tasks.Task<ApiResponse<SqlTableListBody>> SqlTablesPostWithHttpInfoAsync(string body = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// DEPRECATED - Gets the set of tables referenced in a sql query
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Giis.Tdrules.Openapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">An object that includes the sql to be processed (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SqlTableListBody</returns>
        [Obsolete]
        System.Threading.Tasks.Task<SqlTableListBody> TablesPostAsync(string body = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// DEPRECATED - Gets the set of tables referenced in a sql query
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Giis.Tdrules.Openapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">An object that includes the sql to be processed (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SqlTableListBody)</returns>
        [Obsolete]
        System.Threading.Tasks.Task<ApiResponse<SqlTableListBody>> TablesPostWithHttpInfoAsync(string body = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISqlrulesApi : ISqlrulesApiSync, ISqlrulesApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class SqlrulesApi : ISqlrulesApi
    {
        private Giis.Tdrules.Openapi.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="SqlrulesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SqlrulesApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SqlrulesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SqlrulesApi(string basePath)
        {
            this.Configuration = Giis.Tdrules.Openapi.Client.Configuration.MergeConfigurations(
                Giis.Tdrules.Openapi.Client.GlobalConfiguration.Instance,
                new Giis.Tdrules.Openapi.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Giis.Tdrules.Openapi.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Giis.Tdrules.Openapi.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Giis.Tdrules.Openapi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SqlrulesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public SqlrulesApi(Giis.Tdrules.Openapi.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Giis.Tdrules.Openapi.Client.Configuration.MergeConfigurations(
                Giis.Tdrules.Openapi.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Giis.Tdrules.Openapi.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Giis.Tdrules.Openapi.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Giis.Tdrules.Openapi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SqlrulesApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public SqlrulesApi(Giis.Tdrules.Openapi.Client.ISynchronousClient client, Giis.Tdrules.Openapi.Client.IAsynchronousClient asyncClient, Giis.Tdrules.Openapi.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Giis.Tdrules.Openapi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Giis.Tdrules.Openapi.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Giis.Tdrules.Openapi.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Giis.Tdrules.Openapi.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Giis.Tdrules.Openapi.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Healthcheck entry point 
        /// </summary>
        /// <exception cref="Giis.Tdrules.Openapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>string</returns>
        public string HealthcheckGet(int operationIndex = 0)
        {
            Giis.Tdrules.Openapi.Client.ApiResponse<string> localVarResponse = HealthcheckGetWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Healthcheck entry point 
        /// </summary>
        /// <exception cref="Giis.Tdrules.Openapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of string</returns>
        public Giis.Tdrules.Openapi.Client.ApiResponse<string> HealthcheckGetWithHttpInfo(int operationIndex = 0)
        {
            Giis.Tdrules.Openapi.Client.RequestOptions localVarRequestOptions = new Giis.Tdrules.Openapi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain"
            };

            var localVarContentType = Giis.Tdrules.Openapi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Giis.Tdrules.Openapi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "SqlrulesApi.HealthcheckGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<string>("/healthcheck", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("HealthcheckGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Healthcheck entry point 
        /// </summary>
        /// <exception cref="Giis.Tdrules.Openapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> HealthcheckGetAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Giis.Tdrules.Openapi.Client.ApiResponse<string> localVarResponse = await HealthcheckGetWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Healthcheck entry point 
        /// </summary>
        /// <exception cref="Giis.Tdrules.Openapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<Giis.Tdrules.Openapi.Client.ApiResponse<string>> HealthcheckGetWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Giis.Tdrules.Openapi.Client.RequestOptions localVarRequestOptions = new Giis.Tdrules.Openapi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain"
            };

            var localVarContentType = Giis.Tdrules.Openapi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Giis.Tdrules.Openapi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "SqlrulesApi.HealthcheckGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<string>("/healthcheck", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("HealthcheckGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Gets the set of mutants for a given sql (SQLMutation). Each rule is a mutant of the original SQL query. The mutant is dead (i.e. the rule is covered) if the execution against the database returns the same rows than the original query. 
        /// </summary>
        /// <exception cref="Giis.Tdrules.Openapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sqlRulesBody">An object that includes the sql, schema and an optional string with parameters</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SqlRules</returns>
        public SqlRules MutantsPost(SqlRulesBody sqlRulesBody, int operationIndex = 0)
        {
            Giis.Tdrules.Openapi.Client.ApiResponse<SqlRules> localVarResponse = MutantsPostWithHttpInfo(sqlRulesBody);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the set of mutants for a given sql (SQLMutation). Each rule is a mutant of the original SQL query. The mutant is dead (i.e. the rule is covered) if the execution against the database returns the same rows than the original query. 
        /// </summary>
        /// <exception cref="Giis.Tdrules.Openapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sqlRulesBody">An object that includes the sql, schema and an optional string with parameters</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SqlRules</returns>
        public Giis.Tdrules.Openapi.Client.ApiResponse<SqlRules> MutantsPostWithHttpInfo(SqlRulesBody sqlRulesBody, int operationIndex = 0)
        {
            // verify the required parameter 'sqlRulesBody' is set
            if (sqlRulesBody == null)
            {
                throw new Giis.Tdrules.Openapi.Client.ApiException(400, "Missing required parameter 'sqlRulesBody' when calling SqlrulesApi->MutantsPost");
            }

            Giis.Tdrules.Openapi.Client.RequestOptions localVarRequestOptions = new Giis.Tdrules.Openapi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json; charset=utf-8"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Giis.Tdrules.Openapi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Giis.Tdrules.Openapi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = sqlRulesBody;

            localVarRequestOptions.Operation = "SqlrulesApi.MutantsPost";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<SqlRules>("/mutants", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("MutantsPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Gets the set of mutants for a given sql (SQLMutation). Each rule is a mutant of the original SQL query. The mutant is dead (i.e. the rule is covered) if the execution against the database returns the same rows than the original query. 
        /// </summary>
        /// <exception cref="Giis.Tdrules.Openapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sqlRulesBody">An object that includes the sql, schema and an optional string with parameters</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SqlRules</returns>
        public async System.Threading.Tasks.Task<SqlRules> MutantsPostAsync(SqlRulesBody sqlRulesBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Giis.Tdrules.Openapi.Client.ApiResponse<SqlRules> localVarResponse = await MutantsPostWithHttpInfoAsync(sqlRulesBody, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the set of mutants for a given sql (SQLMutation). Each rule is a mutant of the original SQL query. The mutant is dead (i.e. the rule is covered) if the execution against the database returns the same rows than the original query. 
        /// </summary>
        /// <exception cref="Giis.Tdrules.Openapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sqlRulesBody">An object that includes the sql, schema and an optional string with parameters</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SqlRules)</returns>
        public async System.Threading.Tasks.Task<Giis.Tdrules.Openapi.Client.ApiResponse<SqlRules>> MutantsPostWithHttpInfoAsync(SqlRulesBody sqlRulesBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'sqlRulesBody' is set
            if (sqlRulesBody == null)
            {
                throw new Giis.Tdrules.Openapi.Client.ApiException(400, "Missing required parameter 'sqlRulesBody' when calling SqlrulesApi->MutantsPost");
            }


            Giis.Tdrules.Openapi.Client.RequestOptions localVarRequestOptions = new Giis.Tdrules.Openapi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json; charset=utf-8"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Giis.Tdrules.Openapi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Giis.Tdrules.Openapi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = sqlRulesBody;

            localVarRequestOptions.Operation = "SqlrulesApi.MutantsPost";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<SqlRules>("/mutants", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("MutantsPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Gets the SQLFpc coverage rules for a given sql. Based on Modified Condition Decision Coverage (MCDC) for SQL. Each rule is an SQL statement that is covered if the execution against the database returns at least one row. 
        /// </summary>
        /// <exception cref="Giis.Tdrules.Openapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sqlRulesBody">An object that includes the sql, schema and an optional string with parameters</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SqlRules</returns>
        public SqlRules RulesPost(SqlRulesBody sqlRulesBody, int operationIndex = 0)
        {
            Giis.Tdrules.Openapi.Client.ApiResponse<SqlRules> localVarResponse = RulesPostWithHttpInfo(sqlRulesBody);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the SQLFpc coverage rules for a given sql. Based on Modified Condition Decision Coverage (MCDC) for SQL. Each rule is an SQL statement that is covered if the execution against the database returns at least one row. 
        /// </summary>
        /// <exception cref="Giis.Tdrules.Openapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sqlRulesBody">An object that includes the sql, schema and an optional string with parameters</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SqlRules</returns>
        public Giis.Tdrules.Openapi.Client.ApiResponse<SqlRules> RulesPostWithHttpInfo(SqlRulesBody sqlRulesBody, int operationIndex = 0)
        {
            // verify the required parameter 'sqlRulesBody' is set
            if (sqlRulesBody == null)
            {
                throw new Giis.Tdrules.Openapi.Client.ApiException(400, "Missing required parameter 'sqlRulesBody' when calling SqlrulesApi->RulesPost");
            }

            Giis.Tdrules.Openapi.Client.RequestOptions localVarRequestOptions = new Giis.Tdrules.Openapi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json; charset=utf-8"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Giis.Tdrules.Openapi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Giis.Tdrules.Openapi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = sqlRulesBody;

            localVarRequestOptions.Operation = "SqlrulesApi.RulesPost";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<SqlRules>("/rules", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RulesPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Gets the SQLFpc coverage rules for a given sql. Based on Modified Condition Decision Coverage (MCDC) for SQL. Each rule is an SQL statement that is covered if the execution against the database returns at least one row. 
        /// </summary>
        /// <exception cref="Giis.Tdrules.Openapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sqlRulesBody">An object that includes the sql, schema and an optional string with parameters</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SqlRules</returns>
        public async System.Threading.Tasks.Task<SqlRules> RulesPostAsync(SqlRulesBody sqlRulesBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Giis.Tdrules.Openapi.Client.ApiResponse<SqlRules> localVarResponse = await RulesPostWithHttpInfoAsync(sqlRulesBody, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the SQLFpc coverage rules for a given sql. Based on Modified Condition Decision Coverage (MCDC) for SQL. Each rule is an SQL statement that is covered if the execution against the database returns at least one row. 
        /// </summary>
        /// <exception cref="Giis.Tdrules.Openapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sqlRulesBody">An object that includes the sql, schema and an optional string with parameters</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SqlRules)</returns>
        public async System.Threading.Tasks.Task<Giis.Tdrules.Openapi.Client.ApiResponse<SqlRules>> RulesPostWithHttpInfoAsync(SqlRulesBody sqlRulesBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'sqlRulesBody' is set
            if (sqlRulesBody == null)
            {
                throw new Giis.Tdrules.Openapi.Client.ApiException(400, "Missing required parameter 'sqlRulesBody' when calling SqlrulesApi->RulesPost");
            }


            Giis.Tdrules.Openapi.Client.RequestOptions localVarRequestOptions = new Giis.Tdrules.Openapi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json; charset=utf-8"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Giis.Tdrules.Openapi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Giis.Tdrules.Openapi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = sqlRulesBody;

            localVarRequestOptions.Operation = "SqlrulesApi.RulesPost";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<SqlRules>("/rules", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RulesPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Transforms a non parametrized query into a parametrized one by converting each literal into a parameter and returns the mapping parameter-values 
        /// </summary>
        /// <exception cref="Giis.Tdrules.Openapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">An object that includes the sql to be processed (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SqlParametersBody</returns>
        public SqlParametersBody SqlParametersPost(string body = default(string), int operationIndex = 0)
        {
            Giis.Tdrules.Openapi.Client.ApiResponse<SqlParametersBody> localVarResponse = SqlParametersPostWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Transforms a non parametrized query into a parametrized one by converting each literal into a parameter and returns the mapping parameter-values 
        /// </summary>
        /// <exception cref="Giis.Tdrules.Openapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">An object that includes the sql to be processed (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SqlParametersBody</returns>
        public Giis.Tdrules.Openapi.Client.ApiResponse<SqlParametersBody> SqlParametersPostWithHttpInfo(string body = default(string), int operationIndex = 0)
        {
            Giis.Tdrules.Openapi.Client.RequestOptions localVarRequestOptions = new Giis.Tdrules.Openapi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json; charset=utf-8"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Giis.Tdrules.Openapi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Giis.Tdrules.Openapi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "SqlrulesApi.SqlParametersPost";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<SqlParametersBody>("/sql/parameters", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SqlParametersPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Transforms a non parametrized query into a parametrized one by converting each literal into a parameter and returns the mapping parameter-values 
        /// </summary>
        /// <exception cref="Giis.Tdrules.Openapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">An object that includes the sql to be processed (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SqlParametersBody</returns>
        public async System.Threading.Tasks.Task<SqlParametersBody> SqlParametersPostAsync(string body = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Giis.Tdrules.Openapi.Client.ApiResponse<SqlParametersBody> localVarResponse = await SqlParametersPostWithHttpInfoAsync(body, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Transforms a non parametrized query into a parametrized one by converting each literal into a parameter and returns the mapping parameter-values 
        /// </summary>
        /// <exception cref="Giis.Tdrules.Openapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">An object that includes the sql to be processed (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SqlParametersBody)</returns>
        public async System.Threading.Tasks.Task<Giis.Tdrules.Openapi.Client.ApiResponse<SqlParametersBody>> SqlParametersPostWithHttpInfoAsync(string body = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Giis.Tdrules.Openapi.Client.RequestOptions localVarRequestOptions = new Giis.Tdrules.Openapi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json; charset=utf-8"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Giis.Tdrules.Openapi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Giis.Tdrules.Openapi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "SqlrulesApi.SqlParametersPost";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<SqlParametersBody>("/sql/parameters", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SqlParametersPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Gets the set of tables referenced in a sql query 
        /// </summary>
        /// <exception cref="Giis.Tdrules.Openapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">An object that includes the sql to be processed (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SqlTableListBody</returns>
        public SqlTableListBody SqlTablesPost(string body = default(string), int operationIndex = 0)
        {
            Giis.Tdrules.Openapi.Client.ApiResponse<SqlTableListBody> localVarResponse = SqlTablesPostWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the set of tables referenced in a sql query 
        /// </summary>
        /// <exception cref="Giis.Tdrules.Openapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">An object that includes the sql to be processed (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SqlTableListBody</returns>
        public Giis.Tdrules.Openapi.Client.ApiResponse<SqlTableListBody> SqlTablesPostWithHttpInfo(string body = default(string), int operationIndex = 0)
        {
            Giis.Tdrules.Openapi.Client.RequestOptions localVarRequestOptions = new Giis.Tdrules.Openapi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json; charset=utf-8"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Giis.Tdrules.Openapi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Giis.Tdrules.Openapi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "SqlrulesApi.SqlTablesPost";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<SqlTableListBody>("/sql/tables", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SqlTablesPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Gets the set of tables referenced in a sql query 
        /// </summary>
        /// <exception cref="Giis.Tdrules.Openapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">An object that includes the sql to be processed (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SqlTableListBody</returns>
        public async System.Threading.Tasks.Task<SqlTableListBody> SqlTablesPostAsync(string body = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Giis.Tdrules.Openapi.Client.ApiResponse<SqlTableListBody> localVarResponse = await SqlTablesPostWithHttpInfoAsync(body, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the set of tables referenced in a sql query 
        /// </summary>
        /// <exception cref="Giis.Tdrules.Openapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">An object that includes the sql to be processed (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SqlTableListBody)</returns>
        public async System.Threading.Tasks.Task<Giis.Tdrules.Openapi.Client.ApiResponse<SqlTableListBody>> SqlTablesPostWithHttpInfoAsync(string body = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Giis.Tdrules.Openapi.Client.RequestOptions localVarRequestOptions = new Giis.Tdrules.Openapi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json; charset=utf-8"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Giis.Tdrules.Openapi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Giis.Tdrules.Openapi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "SqlrulesApi.SqlTablesPost";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<SqlTableListBody>("/sql/tables", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SqlTablesPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// DEPRECATED - Gets the set of tables referenced in a sql query 
        /// </summary>
        /// <exception cref="Giis.Tdrules.Openapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">An object that includes the sql to be processed (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SqlTableListBody</returns>
        [Obsolete]
        public SqlTableListBody TablesPost(string body = default(string), int operationIndex = 0)
        {
            Giis.Tdrules.Openapi.Client.ApiResponse<SqlTableListBody> localVarResponse = TablesPostWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// DEPRECATED - Gets the set of tables referenced in a sql query 
        /// </summary>
        /// <exception cref="Giis.Tdrules.Openapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">An object that includes the sql to be processed (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SqlTableListBody</returns>
        [Obsolete]
        public Giis.Tdrules.Openapi.Client.ApiResponse<SqlTableListBody> TablesPostWithHttpInfo(string body = default(string), int operationIndex = 0)
        {
            Giis.Tdrules.Openapi.Client.RequestOptions localVarRequestOptions = new Giis.Tdrules.Openapi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json; charset=utf-8"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Giis.Tdrules.Openapi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Giis.Tdrules.Openapi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "SqlrulesApi.TablesPost";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<SqlTableListBody>("/tables", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TablesPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// DEPRECATED - Gets the set of tables referenced in a sql query 
        /// </summary>
        /// <exception cref="Giis.Tdrules.Openapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">An object that includes the sql to be processed (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SqlTableListBody</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<SqlTableListBody> TablesPostAsync(string body = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Giis.Tdrules.Openapi.Client.ApiResponse<SqlTableListBody> localVarResponse = await TablesPostWithHttpInfoAsync(body, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// DEPRECATED - Gets the set of tables referenced in a sql query 
        /// </summary>
        /// <exception cref="Giis.Tdrules.Openapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">An object that includes the sql to be processed (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SqlTableListBody)</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<Giis.Tdrules.Openapi.Client.ApiResponse<SqlTableListBody>> TablesPostWithHttpInfoAsync(string body = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Giis.Tdrules.Openapi.Client.RequestOptions localVarRequestOptions = new Giis.Tdrules.Openapi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json; charset=utf-8"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Giis.Tdrules.Openapi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Giis.Tdrules.Openapi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "SqlrulesApi.TablesPost";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<SqlTableListBody>("/tables", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TablesPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
