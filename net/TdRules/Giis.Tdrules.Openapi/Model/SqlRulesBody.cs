/*
 * SQLRules API - Evaluation of test coverage for SQL database queries
 *
 * A set of services to evaluate the coverage of SQL database queries. Coverage criteria are implemented in a set of rules, that when evaluated with respect to a given database determine the coverage of the database with respect to the query. Two kind of coverage rules are generated, Full Predicate Coverage rules for SQL (SQLFpc) and Mutants for SQL (SQLMutation)
 *
 * The version of the OpenAPI document: 3.1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Giis.Tdrules.Openapi.Client.OpenAPIDateConverter;

namespace Giis.Tdrules.Openapi.Model
{
    /// <summary>
    /// Represents the input data to the sql coverage rules generator (sql, schema and options)
    /// </summary>
    [DataContract(Name = "SqlRulesBody")]
    public partial class SqlRulesBody : IEquatable<SqlRulesBody>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SqlRulesBody" /> class.
        /// </summary>
        /// <param name="sql">The sql to generate the coverage rules (default to &quot;&quot;).</param>
        /// <param name="schema">schema.</param>
        /// <param name="options">A set of additional options to modify the behaviour of the rule generation (strings separated by space). Allowed values are in documented https://in2test.lsi.uniovi.es/sqlrules/api-doc.html. Some of them are dependent of the kind of rules to be generated, &lt;br/&gt;Example. &#x60;lang&#x3D;en noboundary&#x60; specifies that the generated sqlfpc coverage rules must contain an english description of the rule and rules for checking boundary values must not been generated. (default to &quot;&quot;).</param>
        public SqlRulesBody(string sql = @"", DbSchema schema = default(DbSchema), string options = @"")
        {
            // use default value if no "sql" provided
            this.Sql = sql ?? @"";
            this.Schema = schema;
            // use default value if no "options" provided
            this.Options = options ?? @"";
        }

        /// <summary>
        /// The sql to generate the coverage rules
        /// </summary>
        /// <value>The sql to generate the coverage rules</value>
        [DataMember(Name = "sql", EmitDefaultValue = false)]
        public string Sql { get; set; }
        public string GetSql() { return Sql; }
        public void SetSql(string value) { Sql=value; }

        /// <summary>
        /// Gets or Sets Schema
        /// </summary>
        [DataMember(Name = "schema", EmitDefaultValue = false)]
        public DbSchema Schema { get; set; }
        public DbSchema GetSchema() { return Schema; }
        public void SetSchema(DbSchema value) { Schema=value; }

        /// <summary>
        /// A set of additional options to modify the behaviour of the rule generation (strings separated by space). Allowed values are in documented https://in2test.lsi.uniovi.es/sqlrules/api-doc.html. Some of them are dependent of the kind of rules to be generated, &lt;br/&gt;Example. &#x60;lang&#x3D;en noboundary&#x60; specifies that the generated sqlfpc coverage rules must contain an english description of the rule and rules for checking boundary values must not been generated.
        /// </summary>
        /// <value>A set of additional options to modify the behaviour of the rule generation (strings separated by space). Allowed values are in documented https://in2test.lsi.uniovi.es/sqlrules/api-doc.html. Some of them are dependent of the kind of rules to be generated, &lt;br/&gt;Example. &#x60;lang&#x3D;en noboundary&#x60; specifies that the generated sqlfpc coverage rules must contain an english description of the rule and rules for checking boundary values must not been generated.</value>
        [DataMember(Name = "options", EmitDefaultValue = false)]
        public string Options { get; set; }
        public string GetOptions() { return Options; }
        public void SetOptions(string value) { Options=value; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SqlRulesBody {\n");
            sb.Append("  Sql: ").Append(Sql).Append("\n");
            sb.Append("  Schema: ").Append(Schema).Append("\n");
            sb.Append("  Options: ").Append(Options).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SqlRulesBody);
        }

        /// <summary>
        /// Returns true if SqlRulesBody instances are equal
        /// </summary>
        /// <param name="input">Instance of SqlRulesBody to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SqlRulesBody input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Sql == input.Sql ||
                    (this.Sql != null &&
                    this.Sql.Equals(input.Sql))
                ) && 
                (
                    this.Schema == input.Schema ||
                    (this.Schema != null &&
                    this.Schema.Equals(input.Schema))
                ) && 
                (
                    this.Options == input.Options ||
                    (this.Options != null &&
                    this.Options.Equals(input.Options))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Sql != null)
                {
                    hashCode = (hashCode * 59) + this.Sql.GetHashCode();
                }
                if (this.Schema != null)
                {
                    hashCode = (hashCode * 59) + this.Schema.GetHashCode();
                }
                if (this.Options != null)
                {
                    hashCode = (hashCode * 59) + this.Options.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
