/*
 * SQLRules API - Evaluation of test coverage for SQL database queries
 *
 * A set of services to evaluate the coverage of SQL database queries. Coverage criteria are implemented in a set of rules, that when evaluated with respect to a given database determine the coverage of the database with respect to the query. Two kind of coverage rules are generated, Full Predicate Coverage rules for SQL (SQLFpc) and Mutants for SQL (SQLMutation)
 *
 * The version of the OpenAPI document: 3.1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Giis.Tdrules.Openapi.Client.OpenAPIDateConverter;

namespace Giis.Tdrules.Openapi.Model
{
    /// <summary>
    /// Represents a column in a table. To generate sql coverage rules, at least &#x60;name&#x60; and &#x60;datatype&#x60; must be specified
    /// </summary>
    [DataContract(Name = "DbColumn")]
    public partial class DbColumn : IEquatable<DbColumn>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DbColumn" /> class.
        /// </summary>
        /// <param name="name">The name of this column (default to &quot;&quot;).</param>
        /// <param name="datatype">The datatype of this column. NOTE, the size of the type (scale), if defined, is stored in the &#x60;size&#x60; field, eg. given a &#x60;VARCHAR(10)&#x60;, this field stores &#x60;VARCHAR&#x60; and the &#x60;size&#x60; field stores &#x60;10&#x60; (default to &quot;&quot;).</param>
        /// <param name="compositetype">If the datatype is not primitive this attibute holds &#x60;array&#x60; or &#x60;type&#x60;, NOTE, If this field is &#x60;array&#x60; then the &#x60;datatype&#x60; holds the type of each array item, If this field is &#x60;type&#x60; refers the UDT that must be defined in another table (default to &quot;&quot;).</param>
        /// <param name="subtype">A modifier of the datatype, eg. given a &#x60;DATETIME WITH TIMEZONE&#x60;, this field stores &#x60;WITH TIMEZONE&#x60; and the datatype field stores &#x60;DATETIME&#x60; (default to &quot;&quot;).</param>
        /// <param name="size">The size of the datatype of this column. If the size is composed by precision and scale, both values must be separated by a comma, eg. given a &#x60;DECIMAL(10,2)&#x60;, this fiel stores the value &#x60;10,2&#x60; (default to &quot;&quot;).</param>
        /// <param name="key">if this value is &#x60;true&#x60;, the column is part of the primary key (default to &quot;&quot;).</param>
        /// <param name="autoincrement">if this value is &#x60;true&#x60;, the value of the column is autogenerated when a new instance is created (default to &quot;&quot;).</param>
        /// <param name="notnull">if this value is &#x60;true&#x60;, the column is not nullable (declared with NOT NULL) (default to &quot;&quot;).</param>
        /// <param name="fk">If this value is non empty, represents the referenced column in a foreign key constraint. This value must be in the form &#x60;&lt;table-name&gt;.&lt;column-name&gt;&#x60; (default to &quot;&quot;).</param>
        /// <param name="fkname">The foreign constrain name as determined by jdbc (default to &quot;&quot;).</param>
        /// <param name="checkin">If the check constraint applicable to this column specifies a list of allowed literals, this field may indicate the set of comma separated allowed values, eg. &#x60;&#39;Y&#39;,&#39;N&#39;&#x60; represents a fied that can have only these two values (default to &quot;&quot;).</param>
        /// <param name="defaultvalue">The default value applicable to this column (default to &quot;&quot;).</param>
        /// <param name="extended">A map of additional column properties to store information required by other applications.</param>
        public DbColumn(string name = @"", string datatype = @"", string compositetype = @"", string subtype = @"", string size = @"", string key = @"", string autoincrement = @"", string notnull = @"", string fk = @"", string fkname = @"", string checkin = @"", string defaultvalue = @"", Dictionary<string, string> extended = default(Dictionary<string, string>))
        {
            // use default value if no "name" provided
            this.Name = name ?? @"";
            // use default value if no "datatype" provided
            this.Datatype = datatype ?? @"";
            // use default value if no "compositetype" provided
            this.Compositetype = compositetype ?? @"";
            // use default value if no "subtype" provided
            this.Subtype = subtype ?? @"";
            // use default value if no "size" provided
            this.Size = size ?? @"";
            // use default value if no "key" provided
            this.Key = key ?? @"";
            // use default value if no "autoincrement" provided
            this.Autoincrement = autoincrement ?? @"";
            // use default value if no "notnull" provided
            this.Notnull = notnull ?? @"";
            // use default value if no "fk" provided
            this.Fk = fk ?? @"";
            // use default value if no "fkname" provided
            this.Fkname = fkname ?? @"";
            // use default value if no "checkin" provided
            this.Checkin = checkin ?? @"";
            // use default value if no "defaultvalue" provided
            this.Defaultvalue = defaultvalue ?? @"";
            this.Extended = extended;
        }

        /// <summary>
        /// The name of this column
        /// </summary>
        /// <value>The name of this column</value>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }
        public string GetName() { return Name; }
        public void SetName(string value) { Name=value; }

        /// <summary>
        /// The datatype of this column. NOTE, the size of the type (scale), if defined, is stored in the &#x60;size&#x60; field, eg. given a &#x60;VARCHAR(10)&#x60;, this field stores &#x60;VARCHAR&#x60; and the &#x60;size&#x60; field stores &#x60;10&#x60;
        /// </summary>
        /// <value>The datatype of this column. NOTE, the size of the type (scale), if defined, is stored in the &#x60;size&#x60; field, eg. given a &#x60;VARCHAR(10)&#x60;, this field stores &#x60;VARCHAR&#x60; and the &#x60;size&#x60; field stores &#x60;10&#x60;</value>
        [DataMember(Name = "datatype", EmitDefaultValue = false)]
        public string Datatype { get; set; }
        public string GetDatatype() { return Datatype; }
        public void SetDatatype(string value) { Datatype=value; }

        /// <summary>
        /// If the datatype is not primitive this attibute holds &#x60;array&#x60; or &#x60;type&#x60;, NOTE, If this field is &#x60;array&#x60; then the &#x60;datatype&#x60; holds the type of each array item, If this field is &#x60;type&#x60; refers the UDT that must be defined in another table
        /// </summary>
        /// <value>If the datatype is not primitive this attibute holds &#x60;array&#x60; or &#x60;type&#x60;, NOTE, If this field is &#x60;array&#x60; then the &#x60;datatype&#x60; holds the type of each array item, If this field is &#x60;type&#x60; refers the UDT that must be defined in another table</value>
        [DataMember(Name = "compositetype", EmitDefaultValue = false)]
        public string Compositetype { get; set; }
        public string GetCompositetype() { return Compositetype; }
        public void SetCompositetype(string value) { Compositetype=value; }

        /// <summary>
        /// A modifier of the datatype, eg. given a &#x60;DATETIME WITH TIMEZONE&#x60;, this field stores &#x60;WITH TIMEZONE&#x60; and the datatype field stores &#x60;DATETIME&#x60;
        /// </summary>
        /// <value>A modifier of the datatype, eg. given a &#x60;DATETIME WITH TIMEZONE&#x60;, this field stores &#x60;WITH TIMEZONE&#x60; and the datatype field stores &#x60;DATETIME&#x60;</value>
        [DataMember(Name = "subtype", EmitDefaultValue = false)]
        public string Subtype { get; set; }
        public string GetSubtype() { return Subtype; }
        public void SetSubtype(string value) { Subtype=value; }

        /// <summary>
        /// The size of the datatype of this column. If the size is composed by precision and scale, both values must be separated by a comma, eg. given a &#x60;DECIMAL(10,2)&#x60;, this fiel stores the value &#x60;10,2&#x60;
        /// </summary>
        /// <value>The size of the datatype of this column. If the size is composed by precision and scale, both values must be separated by a comma, eg. given a &#x60;DECIMAL(10,2)&#x60;, this fiel stores the value &#x60;10,2&#x60;</value>
        [DataMember(Name = "size", EmitDefaultValue = false)]
        public string Size { get; set; }
        public string GetSize() { return Size; }
        public void SetSize(string value) { Size=value; }

        /// <summary>
        /// if this value is &#x60;true&#x60;, the column is part of the primary key
        /// </summary>
        /// <value>if this value is &#x60;true&#x60;, the column is part of the primary key</value>
        [DataMember(Name = "key", EmitDefaultValue = false)]
        public string Key { get; set; }
        public string GetKey() { return Key; }
        public void SetKey(string value) { Key=value; }

        /// <summary>
        /// if this value is &#x60;true&#x60;, the value of the column is autogenerated when a new instance is created
        /// </summary>
        /// <value>if this value is &#x60;true&#x60;, the value of the column is autogenerated when a new instance is created</value>
        [DataMember(Name = "autoincrement", EmitDefaultValue = false)]
        public string Autoincrement { get; set; }
        public string GetAutoincrement() { return Autoincrement; }
        public void SetAutoincrement(string value) { Autoincrement=value; }

        /// <summary>
        /// if this value is &#x60;true&#x60;, the column is not nullable (declared with NOT NULL)
        /// </summary>
        /// <value>if this value is &#x60;true&#x60;, the column is not nullable (declared with NOT NULL)</value>
        [DataMember(Name = "notnull", EmitDefaultValue = false)]
        public string Notnull { get; set; }
        public string GetNotnull() { return Notnull; }
        public void SetNotnull(string value) { Notnull=value; }

        /// <summary>
        /// If this value is non empty, represents the referenced column in a foreign key constraint. This value must be in the form &#x60;&lt;table-name&gt;.&lt;column-name&gt;&#x60;
        /// </summary>
        /// <value>If this value is non empty, represents the referenced column in a foreign key constraint. This value must be in the form &#x60;&lt;table-name&gt;.&lt;column-name&gt;&#x60;</value>
        [DataMember(Name = "fk", EmitDefaultValue = false)]
        public string Fk { get; set; }
        public string GetFk() { return Fk; }
        public void SetFk(string value) { Fk=value; }

        /// <summary>
        /// The foreign constrain name as determined by jdbc
        /// </summary>
        /// <value>The foreign constrain name as determined by jdbc</value>
        [DataMember(Name = "fkname", EmitDefaultValue = false)]
        public string Fkname { get; set; }
        public string GetFkname() { return Fkname; }
        public void SetFkname(string value) { Fkname=value; }

        /// <summary>
        /// If the check constraint applicable to this column specifies a list of allowed literals, this field may indicate the set of comma separated allowed values, eg. &#x60;&#39;Y&#39;,&#39;N&#39;&#x60; represents a fied that can have only these two values
        /// </summary>
        /// <value>If the check constraint applicable to this column specifies a list of allowed literals, this field may indicate the set of comma separated allowed values, eg. &#x60;&#39;Y&#39;,&#39;N&#39;&#x60; represents a fied that can have only these two values</value>
        [DataMember(Name = "checkin", EmitDefaultValue = false)]
        public string Checkin { get; set; }
        public string GetCheckin() { return Checkin; }
        public void SetCheckin(string value) { Checkin=value; }

        /// <summary>
        /// The default value applicable to this column
        /// </summary>
        /// <value>The default value applicable to this column</value>
        [DataMember(Name = "defaultvalue", EmitDefaultValue = false)]
        public string Defaultvalue { get; set; }
        public string GetDefaultvalue() { return Defaultvalue; }
        public void SetDefaultvalue(string value) { Defaultvalue=value; }

        /// <summary>
        /// A map of additional column properties to store information required by other applications
        /// </summary>
        /// <value>A map of additional column properties to store information required by other applications</value>
        [DataMember(Name = "extended", EmitDefaultValue = false)]
        public Dictionary<string, string> Extended { get; set; }
        public Dictionary<string,string> GetExtended() { return Extended; }
        public void SetExtended(Dictionary<string,string> value) { Extended=value; }
        public void PutExtendedItem(string key, string summaryItem) { if (this.Extended == null) this.Extended = new Dictionary<string,string>(); this.Extended[key]=summaryItem; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DbColumn {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Datatype: ").Append(Datatype).Append("\n");
            sb.Append("  Compositetype: ").Append(Compositetype).Append("\n");
            sb.Append("  Subtype: ").Append(Subtype).Append("\n");
            sb.Append("  Size: ").Append(Size).Append("\n");
            sb.Append("  Key: ").Append(Key).Append("\n");
            sb.Append("  Autoincrement: ").Append(Autoincrement).Append("\n");
            sb.Append("  Notnull: ").Append(Notnull).Append("\n");
            sb.Append("  Fk: ").Append(Fk).Append("\n");
            sb.Append("  Fkname: ").Append(Fkname).Append("\n");
            sb.Append("  Checkin: ").Append(Checkin).Append("\n");
            sb.Append("  Defaultvalue: ").Append(Defaultvalue).Append("\n");
            sb.Append("  Extended: ").Append(Extended).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DbColumn);
        }

        /// <summary>
        /// Returns true if DbColumn instances are equal
        /// </summary>
        /// <param name="input">Instance of DbColumn to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DbColumn input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Datatype == input.Datatype ||
                    (this.Datatype != null &&
                    this.Datatype.Equals(input.Datatype))
                ) && 
                (
                    this.Compositetype == input.Compositetype ||
                    (this.Compositetype != null &&
                    this.Compositetype.Equals(input.Compositetype))
                ) && 
                (
                    this.Subtype == input.Subtype ||
                    (this.Subtype != null &&
                    this.Subtype.Equals(input.Subtype))
                ) && 
                (
                    this.Size == input.Size ||
                    (this.Size != null &&
                    this.Size.Equals(input.Size))
                ) && 
                (
                    this.Key == input.Key ||
                    (this.Key != null &&
                    this.Key.Equals(input.Key))
                ) && 
                (
                    this.Autoincrement == input.Autoincrement ||
                    (this.Autoincrement != null &&
                    this.Autoincrement.Equals(input.Autoincrement))
                ) && 
                (
                    this.Notnull == input.Notnull ||
                    (this.Notnull != null &&
                    this.Notnull.Equals(input.Notnull))
                ) && 
                (
                    this.Fk == input.Fk ||
                    (this.Fk != null &&
                    this.Fk.Equals(input.Fk))
                ) && 
                (
                    this.Fkname == input.Fkname ||
                    (this.Fkname != null &&
                    this.Fkname.Equals(input.Fkname))
                ) && 
                (
                    this.Checkin == input.Checkin ||
                    (this.Checkin != null &&
                    this.Checkin.Equals(input.Checkin))
                ) && 
                (
                    this.Defaultvalue == input.Defaultvalue ||
                    (this.Defaultvalue != null &&
                    this.Defaultvalue.Equals(input.Defaultvalue))
                ) && 
                (
                    this.Extended == input.Extended ||
                    this.Extended != null &&
                    input.Extended != null &&
                    this.Extended.SequenceEqual(input.Extended)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.Datatype != null)
                {
                    hashCode = (hashCode * 59) + this.Datatype.GetHashCode();
                }
                if (this.Compositetype != null)
                {
                    hashCode = (hashCode * 59) + this.Compositetype.GetHashCode();
                }
                if (this.Subtype != null)
                {
                    hashCode = (hashCode * 59) + this.Subtype.GetHashCode();
                }
                if (this.Size != null)
                {
                    hashCode = (hashCode * 59) + this.Size.GetHashCode();
                }
                if (this.Key != null)
                {
                    hashCode = (hashCode * 59) + this.Key.GetHashCode();
                }
                if (this.Autoincrement != null)
                {
                    hashCode = (hashCode * 59) + this.Autoincrement.GetHashCode();
                }
                if (this.Notnull != null)
                {
                    hashCode = (hashCode * 59) + this.Notnull.GetHashCode();
                }
                if (this.Fk != null)
                {
                    hashCode = (hashCode * 59) + this.Fk.GetHashCode();
                }
                if (this.Fkname != null)
                {
                    hashCode = (hashCode * 59) + this.Fkname.GetHashCode();
                }
                if (this.Checkin != null)
                {
                    hashCode = (hashCode * 59) + this.Checkin.GetHashCode();
                }
                if (this.Defaultvalue != null)
                {
                    hashCode = (hashCode * 59) + this.Defaultvalue.GetHashCode();
                }
                if (this.Extended != null)
                {
                    hashCode = (hashCode * 59) + this.Extended.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
