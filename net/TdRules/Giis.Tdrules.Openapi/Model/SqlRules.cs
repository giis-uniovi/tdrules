/*
 * SQLRules API - Evaluation of test coverage for SQL database queries
 *
 * A set of services to evaluate the coverage of SQL database queries. Coverage criteria are implemented in a set of rules, that when evaluated with respect to a given database determine the coverage of the database with respect to the query. Two kind of coverage rules are generated, Full Predicate Coverage rules for SQL (SQLFpc) and Mutants for SQL (SQLMutation)
 *
 * The version of the OpenAPI document: 3.1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Giis.Tdrules.Openapi.Client.OpenAPIDateConverter;

namespace Giis.Tdrules.Openapi.Model
{
    /// <summary>
    /// Represents a set of sql coverage rules...
    /// </summary>
    [DataContract(Name = "SqlRules")]
    public partial class SqlRules : IEquatable<SqlRules>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SqlRules" /> class.
        /// </summary>
        /// <param name="rulesClass">The class of the rules generated (&#x60;sqlfpc&#x60; or &#x60;sqlmutation&#x60;).</param>
        /// <param name="version">The version number of the service that generates this rule (default to &quot;&quot;).</param>
        /// <param name="environment">The environment of the service that generates this rule (default to &quot;&quot;).</param>
        /// <param name="summary">A map of additional properties to store information about the execution of the rules against the database.</param>
        /// <param name="sql">The sql of the query that generates the rules (default to &quot;&quot;).</param>
        /// <param name="parsedsql">The sql after being parsed (only if specified by the &#x60;options&#x60; used when calling the service) (default to &quot;&quot;).</param>
        /// <param name="error">If empty, the service successfully obtained the rules, if not, indicates the error occurred, eg. the query is not syntactically correct. This field can be used to store runtime errors when executing the sql query (default to &quot;&quot;).</param>
        /// <param name="rules">The set of rules generated.</param>
        public SqlRules(string rulesClass = default(string), string version = @"", string environment = @"", Dictionary<string, string> summary = default(Dictionary<string, string>), string sql = @"", string parsedsql = @"", string error = @"", List<SqlRule> rules = default(List<SqlRule>))
        {
            this.RulesClass = rulesClass;
            // use default value if no "version" provided
            this._Version = version ?? @"";
            // use default value if no "environment" provided
            this.Environment = environment ?? @"";
            this.Summary = summary;
            // use default value if no "sql" provided
            this.Sql = sql ?? @"";
            // use default value if no "parsedsql" provided
            this.Parsedsql = parsedsql ?? @"";
            // use default value if no "error" provided
            this.Error = error ?? @"";
            this.Rules = rules;
        }

        /// <summary>
        /// The class of the rules generated (&#x60;sqlfpc&#x60; or &#x60;sqlmutation&#x60;)
        /// </summary>
        /// <value>The class of the rules generated (&#x60;sqlfpc&#x60; or &#x60;sqlmutation&#x60;)</value>
        [DataMember(Name = "rulesClass", EmitDefaultValue = false)]
        public string RulesClass { get; set; }
        public string GetRulesClass() { return RulesClass; }
        public void SetRulesClass(string value) { RulesClass=value; }

        /// <summary>
        /// The version number of the service that generates this rule
        /// </summary>
        /// <value>The version number of the service that generates this rule</value>
        [DataMember(Name = "version", EmitDefaultValue = false)]
        public string _Version { get; set; }
        public string GetVersion() { return _Version; }
        public void SetVersion(string value) { _Version=value; }

        /// <summary>
        /// The environment of the service that generates this rule
        /// </summary>
        /// <value>The environment of the service that generates this rule</value>
        [DataMember(Name = "environment", EmitDefaultValue = false)]
        public string Environment { get; set; }
        public string GetEnvironment() { return Environment; }
        public void SetEnvironment(string value) { Environment=value; }

        /// <summary>
        /// A map of additional properties to store information about the execution of the rules against the database
        /// </summary>
        /// <value>A map of additional properties to store information about the execution of the rules against the database</value>
        [DataMember(Name = "summary", EmitDefaultValue = false)]
        public Dictionary<string, string> Summary { get; set; }
        public Dictionary<string,string> GetSummary() { return Summary; }
        public void SetSummary(Dictionary<string,string> value) { Summary=value; }
        public void PutSummaryItem(string key, string summaryItem) { if (this.Summary == null) this.Summary = new Dictionary<string,string>(); this.Summary[key]=summaryItem; }

        /// <summary>
        /// The sql of the query that generates the rules
        /// </summary>
        /// <value>The sql of the query that generates the rules</value>
        [DataMember(Name = "sql", EmitDefaultValue = false)]
        public string Sql { get; set; }
        public string GetSql() { return Sql; }
        public void SetSql(string value) { Sql=value; }

        /// <summary>
        /// The sql after being parsed (only if specified by the &#x60;options&#x60; used when calling the service)
        /// </summary>
        /// <value>The sql after being parsed (only if specified by the &#x60;options&#x60; used when calling the service)</value>
        [DataMember(Name = "parsedsql", EmitDefaultValue = false)]
        public string Parsedsql { get; set; }
        public string GetParsedsql() { return Parsedsql; }
        public void SetParsedsql(string value) { Parsedsql=value; }

        /// <summary>
        /// If empty, the service successfully obtained the rules, if not, indicates the error occurred, eg. the query is not syntactically correct. This field can be used to store runtime errors when executing the sql query
        /// </summary>
        /// <value>If empty, the service successfully obtained the rules, if not, indicates the error occurred, eg. the query is not syntactically correct. This field can be used to store runtime errors when executing the sql query</value>
        [DataMember(Name = "error", EmitDefaultValue = false)]
        public string Error { get; set; }
        public string GetError() { return Error; }
        public void SetError(string value) { Error=value; }

        /// <summary>
        /// The set of rules generated
        /// </summary>
        /// <value>The set of rules generated</value>
        [DataMember(Name = "rules", EmitDefaultValue = false)]
        public List<SqlRule> Rules { get; set; }
        public List<SqlRule> GetRules() { return Rules; }
        public void SetRules(List<SqlRule> value) { Rules=value; }
        public void AddRulesItem(SqlRule item) { if (this.Rules == null) this.Rules = new List<SqlRule>(); this.Rules.Add(item); }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SqlRules {\n");
            sb.Append("  RulesClass: ").Append(RulesClass).Append("\n");
            sb.Append("  _Version: ").Append(_Version).Append("\n");
            sb.Append("  Environment: ").Append(Environment).Append("\n");
            sb.Append("  Summary: ").Append(Summary).Append("\n");
            sb.Append("  Sql: ").Append(Sql).Append("\n");
            sb.Append("  Parsedsql: ").Append(Parsedsql).Append("\n");
            sb.Append("  Error: ").Append(Error).Append("\n");
            sb.Append("  Rules: ").Append(Rules).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SqlRules);
        }

        /// <summary>
        /// Returns true if SqlRules instances are equal
        /// </summary>
        /// <param name="input">Instance of SqlRules to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SqlRules input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.RulesClass == input.RulesClass ||
                    (this.RulesClass != null &&
                    this.RulesClass.Equals(input.RulesClass))
                ) && 
                (
                    this._Version == input._Version ||
                    (this._Version != null &&
                    this._Version.Equals(input._Version))
                ) && 
                (
                    this.Environment == input.Environment ||
                    (this.Environment != null &&
                    this.Environment.Equals(input.Environment))
                ) && 
                (
                    this.Summary == input.Summary ||
                    this.Summary != null &&
                    input.Summary != null &&
                    this.Summary.SequenceEqual(input.Summary)
                ) && 
                (
                    this.Sql == input.Sql ||
                    (this.Sql != null &&
                    this.Sql.Equals(input.Sql))
                ) && 
                (
                    this.Parsedsql == input.Parsedsql ||
                    (this.Parsedsql != null &&
                    this.Parsedsql.Equals(input.Parsedsql))
                ) && 
                (
                    this.Error == input.Error ||
                    (this.Error != null &&
                    this.Error.Equals(input.Error))
                ) && 
                (
                    this.Rules == input.Rules ||
                    this.Rules != null &&
                    input.Rules != null &&
                    this.Rules.SequenceEqual(input.Rules)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.RulesClass != null)
                {
                    hashCode = (hashCode * 59) + this.RulesClass.GetHashCode();
                }
                if (this._Version != null)
                {
                    hashCode = (hashCode * 59) + this._Version.GetHashCode();
                }
                if (this.Environment != null)
                {
                    hashCode = (hashCode * 59) + this.Environment.GetHashCode();
                }
                if (this.Summary != null)
                {
                    hashCode = (hashCode * 59) + this.Summary.GetHashCode();
                }
                if (this.Sql != null)
                {
                    hashCode = (hashCode * 59) + this.Sql.GetHashCode();
                }
                if (this.Parsedsql != null)
                {
                    hashCode = (hashCode * 59) + this.Parsedsql.GetHashCode();
                }
                if (this.Error != null)
                {
                    hashCode = (hashCode * 59) + this.Error.GetHashCode();
                }
                if (this.Rules != null)
                {
                    hashCode = (hashCode * 59) + this.Rules.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
