/*
 * TdRules API - Test Data Coverage Evaluation
 *
 * A set of services to evaluate the coverage of test data.  Coverage criteria are implemented in a set of rules, that when evaluated with respect to a given data store determine the coverage of the data store with respect to the query. Two kind of coverage rules are generated, Full Predicate Coverage (FPC) Rules and SQL Mutants. 
 *
 * The version of the OpenAPI document: 4.0.2
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Giis.Tdrules.Openapi.Client.OpenAPIDateConverter;

namespace Giis.Tdrules.Openapi.Model
{
    /// <summary>
    /// Represents a transformed parametrized query and the mapping parameter-values
    /// </summary>
    [DataContract(Name = "QueryParametersBody")]
    public partial class QueryParametersBody : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="QueryParametersBody" /> class.
        /// </summary>
        /// <param name="query">The source (non-parametrized) (default to &quot;&quot;).</param>
        /// <param name="parsedquery">The transformed parametrized query (default to &quot;&quot;).</param>
        /// <param name="error">If empty, the service successfully obtained this object, if not, indicates the error occurred (default to &quot;&quot;).</param>
        /// <param name="parameters">The list of parameters that have been extracted from the query.</param>
        public QueryParametersBody(string query = @"", string parsedquery = @"", string error = @"", List<QueryParam> parameters = default(List<QueryParam>))
        {
            // use default value if no "query" provided
            this.Query = query ?? @"";
            // use default value if no "parsedquery" provided
            this.Parsedquery = parsedquery ?? @"";
            // use default value if no "error" provided
            this.Error = error ?? @"";
            this.Parameters = parameters;
        }

        /// <summary>
        /// The source (non-parametrized)
        /// </summary>
        /// <value>The source (non-parametrized)</value>
        [DataMember(Name = "query", EmitDefaultValue = false)]
        public string Query { get; set; }
        public string GetQuery() { return Query; }
        public void SetQuery(string value) { Query=value; }

        /// <summary>
        /// The transformed parametrized query
        /// </summary>
        /// <value>The transformed parametrized query</value>
        [DataMember(Name = "parsedquery", EmitDefaultValue = false)]
        public string Parsedquery { get; set; }
        public string GetParsedquery() { return Parsedquery; }
        public void SetParsedquery(string value) { Parsedquery=value; }

        /// <summary>
        /// If empty, the service successfully obtained this object, if not, indicates the error occurred
        /// </summary>
        /// <value>If empty, the service successfully obtained this object, if not, indicates the error occurred</value>
        [DataMember(Name = "error", EmitDefaultValue = false)]
        public string Error { get; set; }
        public string GetError() { return Error; }
        public void SetError(string value) { Error=value; }

        /// <summary>
        /// The list of parameters that have been extracted from the query
        /// </summary>
        /// <value>The list of parameters that have been extracted from the query</value>
        [DataMember(Name = "parameters", EmitDefaultValue = false)]
        public List<QueryParam> Parameters { get; set; }
        public List<QueryParam> GetParameters() { return Parameters; }
        public void SetParameters(List<QueryParam> value) { Parameters=value; }
        public void AddParametersItem(QueryParam item) { if (this.Parameters == null) this.Parameters = new List<QueryParam>(); this.Parameters.Add(item); }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class QueryParametersBody {\n");
            sb.Append("  Query: ").Append(Query).Append("\n");
            sb.Append("  Parsedquery: ").Append(Parsedquery).Append("\n");
            sb.Append("  Error: ").Append(Error).Append("\n");
            sb.Append("  Parameters: ").Append(Parameters).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
