/*
 * SQLRules API - Evaluation of test coverage for SQL database queries
 *
 * A set of services to evaluate the coverage of SQL database queries. Coverage criteria are implemented in a set of rules, that when evaluated with respect to a given database determine the coverage of the database with respect to the query. Two kind of coverage rules are generated, Full Predicate Coverage rules for SQL (SQLFpc) and Mutants for SQL (SQLMutation)
 *
 * The version of the OpenAPI document: 3.1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Giis.Tdrules.Openapi.Client.OpenAPIDateConverter;

namespace Giis.Tdrules.Openapi.Model
{
    /// <summary>
    /// Represents a sql statement (dml) to create and/or drop this table
    /// </summary>
    [DataContract(Name = "Ddl")]
    public partial class Ddl : IEquatable<Ddl>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Ddl" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Ddl() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Ddl" /> class.
        /// </summary>
        /// <param name="command">Indicates the kind of update to perform (&#x60;create&#x60; or &#x60;drop&#x60;) (required) (default to &quot;&quot;).</param>
        /// <param name="sql">The sql to execute the update indicated by &#x60;command&#x60; (required) (default to &quot;&quot;).</param>
        public Ddl(string command = @"", string sql = @"")
        {
            // to ensure "command" is required (not null)
            if (command == null)
            {
                throw new ArgumentNullException("command is a required property for Ddl and cannot be null");
            }
            this.Command = command;
            // to ensure "sql" is required (not null)
            if (sql == null)
            {
                throw new ArgumentNullException("sql is a required property for Ddl and cannot be null");
            }
            this.Sql = sql;
        }

        /// <summary>
        /// Indicates the kind of update to perform (&#x60;create&#x60; or &#x60;drop&#x60;)
        /// </summary>
        /// <value>Indicates the kind of update to perform (&#x60;create&#x60; or &#x60;drop&#x60;)</value>
        [DataMember(Name = "command", IsRequired = true, EmitDefaultValue = true)]
        public string Command { get; set; }
        public string GetCommand() { return Command; }
        public void SetCommand(string value) { Command=value; }

        /// <summary>
        /// The sql to execute the update indicated by &#x60;command&#x60;
        /// </summary>
        /// <value>The sql to execute the update indicated by &#x60;command&#x60;</value>
        [DataMember(Name = "sql", IsRequired = true, EmitDefaultValue = true)]
        public string Sql { get; set; }
        public string GetSql() { return Sql; }
        public void SetSql(string value) { Sql=value; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Ddl {\n");
            sb.Append("  Command: ").Append(Command).Append("\n");
            sb.Append("  Sql: ").Append(Sql).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Ddl);
        }

        /// <summary>
        /// Returns true if Ddl instances are equal
        /// </summary>
        /// <param name="input">Instance of Ddl to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Ddl input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Command == input.Command ||
                    (this.Command != null &&
                    this.Command.Equals(input.Command))
                ) && 
                (
                    this.Sql == input.Sql ||
                    (this.Sql != null &&
                    this.Sql.Equals(input.Sql))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Command != null)
                {
                    hashCode = (hashCode * 59) + this.Command.GetHashCode();
                }
                if (this.Sql != null)
                {
                    hashCode = (hashCode * 59) + this.Sql.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
