/*
 * TdRules API - Test Data Coverage Evaluation
 *
 * A set of services to evaluate the coverage of test data.  Coverage criteria are implemented in a set of rules, that when evaluated with respect to a given data store determine the coverage of the data store with respect to the query. Two kind of coverage rules are generated, Full Predicate Coverage (FPC) Rules and SQL Mutants. 
 *
 * The version of the OpenAPI document: 4.0.2
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Giis.Tdrules.Openapi.Client.OpenAPIDateConverter;

namespace Giis.Tdrules.Openapi.Model
{
    /// <summary>
    /// Represents an operation to manipulate the data or the schema in a data store. This entity is store type dependent: - In RDB stores, the command is the type of statement (e.g. create, drop)   and the query is the statement to modify the schema. - In openapi data stores, the command is the http method (e.g. post, put)   and the query is the path (endpoint) where the command is to be executed. 
    /// </summary>
    [DataContract(Name = "Ddl")]
    public partial class Ddl : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Ddl" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Ddl() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Ddl" /> class.
        /// </summary>
        /// <param name="command">The operation to be executed (required) (default to &quot;&quot;).</param>
        /// <param name="query">The statement or path where command is to be executed (required) (default to &quot;&quot;).</param>
        public Ddl(string command = @"", string query = @"")
        {
            // to ensure "command" is required (not null)
            if (command == null)
            {
                throw new ArgumentNullException("command is a required property for Ddl and cannot be null");
            }
            this.Command = command;
            // to ensure "query" is required (not null)
            if (query == null)
            {
                throw new ArgumentNullException("query is a required property for Ddl and cannot be null");
            }
            this.Query = query;
        }

        /// <summary>
        /// The operation to be executed
        /// </summary>
        /// <value>The operation to be executed</value>
        [DataMember(Name = "command", IsRequired = true, EmitDefaultValue = true)]
        public string Command { get; set; }
        public string GetCommand() { return Command; }
        public void SetCommand(string value) { Command=value; }

        /// <summary>
        /// The statement or path where command is to be executed
        /// </summary>
        /// <value>The statement or path where command is to be executed</value>
        [DataMember(Name = "query", IsRequired = true, EmitDefaultValue = true)]
        public string Query { get; set; }
        public string GetQuery() { return Query; }
        public void SetQuery(string value) { Query=value; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Ddl {\n");
            sb.Append("  Command: ").Append(Command).Append("\n");
            sb.Append("  Query: ").Append(Query).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
