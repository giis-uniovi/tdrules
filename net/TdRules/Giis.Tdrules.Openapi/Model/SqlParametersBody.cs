/*
 * SQLRules API - Evaluation of test coverage for SQL database queries
 *
 * A set of services to evaluate the coverage of SQL database queries. Coverage criteria are implemented in a set of rules, that when evaluated with respect to a given database determine the coverage of the database with respect to the query. Two kind of coverage rules are generated, Full Predicate Coverage rules for SQL (SQLFpc) and Mutants for SQL (SQLMutation)
 *
 * The version of the OpenAPI document: 3.1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Giis.Tdrules.Openapi.Client.OpenAPIDateConverter;

namespace Giis.Tdrules.Openapi.Model
{
    /// <summary>
    /// Represents a transformed parametrized query and the mapping parameter-values
    /// </summary>
    [DataContract(Name = "SqlParametersBody")]
    public partial class SqlParametersBody : IEquatable<SqlParametersBody>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SqlParametersBody" /> class.
        /// </summary>
        /// <param name="sql">The source (non-parametrized) (default to &quot;&quot;).</param>
        /// <param name="parsedsql">The transformed parametrized sql (default to &quot;&quot;).</param>
        /// <param name="error">If empty, the service successfully obtained this object, if not, indicates the error occurred (default to &quot;&quot;).</param>
        /// <param name="parameters">The list of parameters that have been extracted from the query.</param>
        public SqlParametersBody(string sql = @"", string parsedsql = @"", string error = @"", List<SqlParam> parameters = default(List<SqlParam>))
        {
            // use default value if no "sql" provided
            this.Sql = sql ?? @"";
            // use default value if no "parsedsql" provided
            this.Parsedsql = parsedsql ?? @"";
            // use default value if no "error" provided
            this.Error = error ?? @"";
            this.Parameters = parameters;
        }

        /// <summary>
        /// The source (non-parametrized)
        /// </summary>
        /// <value>The source (non-parametrized)</value>
        [DataMember(Name = "sql", EmitDefaultValue = false)]
        public string Sql { get; set; }
        public string GetSql() { return Sql; }
        public void SetSql(string value) { Sql=value; }

        /// <summary>
        /// The transformed parametrized sql
        /// </summary>
        /// <value>The transformed parametrized sql</value>
        [DataMember(Name = "parsedsql", EmitDefaultValue = false)]
        public string Parsedsql { get; set; }
        public string GetParsedsql() { return Parsedsql; }
        public void SetParsedsql(string value) { Parsedsql=value; }

        /// <summary>
        /// If empty, the service successfully obtained this object, if not, indicates the error occurred
        /// </summary>
        /// <value>If empty, the service successfully obtained this object, if not, indicates the error occurred</value>
        [DataMember(Name = "error", EmitDefaultValue = false)]
        public string Error { get; set; }
        public string GetError() { return Error; }
        public void SetError(string value) { Error=value; }

        /// <summary>
        /// The list of parameters that have been extracted from the query
        /// </summary>
        /// <value>The list of parameters that have been extracted from the query</value>
        [DataMember(Name = "parameters", EmitDefaultValue = false)]
        public List<SqlParam> Parameters { get; set; }
        public List<SqlParam> GetParameters() { return Parameters; }
        public void SetParameters(List<SqlParam> value) { Parameters=value; }
        public void AddParametersItem(SqlParam item) { if (this.Parameters == null) this.Parameters = new List<SqlParam>(); this.Parameters.Add(item); }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SqlParametersBody {\n");
            sb.Append("  Sql: ").Append(Sql).Append("\n");
            sb.Append("  Parsedsql: ").Append(Parsedsql).Append("\n");
            sb.Append("  Error: ").Append(Error).Append("\n");
            sb.Append("  Parameters: ").Append(Parameters).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SqlParametersBody);
        }

        /// <summary>
        /// Returns true if SqlParametersBody instances are equal
        /// </summary>
        /// <param name="input">Instance of SqlParametersBody to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SqlParametersBody input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Sql == input.Sql ||
                    (this.Sql != null &&
                    this.Sql.Equals(input.Sql))
                ) && 
                (
                    this.Parsedsql == input.Parsedsql ||
                    (this.Parsedsql != null &&
                    this.Parsedsql.Equals(input.Parsedsql))
                ) && 
                (
                    this.Error == input.Error ||
                    (this.Error != null &&
                    this.Error.Equals(input.Error))
                ) && 
                (
                    this.Parameters == input.Parameters ||
                    this.Parameters != null &&
                    input.Parameters != null &&
                    this.Parameters.SequenceEqual(input.Parameters)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Sql != null)
                {
                    hashCode = (hashCode * 59) + this.Sql.GetHashCode();
                }
                if (this.Parsedsql != null)
                {
                    hashCode = (hashCode * 59) + this.Parsedsql.GetHashCode();
                }
                if (this.Error != null)
                {
                    hashCode = (hashCode * 59) + this.Error.GetHashCode();
                }
                if (this.Parameters != null)
                {
                    hashCode = (hashCode * 59) + this.Parameters.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
