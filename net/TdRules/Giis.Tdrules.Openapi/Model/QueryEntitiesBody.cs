/*
 * TdRules API - Test Data Coverage Evaluation
 *
 * A set of services to evaluate the coverage of test data.  Coverage criteria are implemented in a set of rules, that when evaluated with respect to a given data store determine the coverage of the data store with respect to the query. Two kind of coverage rules are generated, Full Predicate Coverage (FPC) Rules and SQL Mutants. 
 *
 * The version of the OpenAPI document: 4.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Giis.Tdrules.Openapi.Client.OpenAPIDateConverter;

namespace Giis.Tdrules.Openapi.Model
{
    /// <summary>
    /// Represents a collection of entities that are used in a query
    /// </summary>
    [DataContract(Name = "QueryEntitiesBody")]
    public partial class QueryEntitiesBody : IEquatable<QueryEntitiesBody>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="QueryEntitiesBody" /> class.
        /// </summary>
        /// <param name="query">The query that contains this collection of entities (default to &quot;&quot;).</param>
        /// <param name="error">If empty, the service successfully obtained this object, if not, indicates the error occurred (default to &quot;&quot;).</param>
        /// <param name="entities">The list of entities used by this query.</param>
        public QueryEntitiesBody(string query = @"", string error = @"", List<string> entities = default(List<string>))
        {
            // use default value if no "query" provided
            this.Query = query ?? @"";
            // use default value if no "error" provided
            this.Error = error ?? @"";
            this.Entities = entities;
        }

        /// <summary>
        /// The query that contains this collection of entities
        /// </summary>
        /// <value>The query that contains this collection of entities</value>
        [DataMember(Name = "query", EmitDefaultValue = false)]
        public string Query { get; set; }
        public string GetQuery() { return Query; }
        public void SetQuery(string value) { Query=value; }

        /// <summary>
        /// If empty, the service successfully obtained this object, if not, indicates the error occurred
        /// </summary>
        /// <value>If empty, the service successfully obtained this object, if not, indicates the error occurred</value>
        [DataMember(Name = "error", EmitDefaultValue = false)]
        public string Error { get; set; }
        public string GetError() { return Error; }
        public void SetError(string value) { Error=value; }

        /// <summary>
        /// The list of entities used by this query
        /// </summary>
        /// <value>The list of entities used by this query</value>
        [DataMember(Name = "entities", EmitDefaultValue = false)]
        public List<string> Entities { get; set; }
        public List<string> GetEntities() { return Entities; }
        public void SetEntities(List<string> value) { Entities=value; }
        public void AddEntitiesItem(string item) { if (this.Entities == null) this.Entities = new List<string>(); this.Entities.Add(item); }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class QueryEntitiesBody {\n");
            sb.Append("  Query: ").Append(Query).Append("\n");
            sb.Append("  Error: ").Append(Error).Append("\n");
            sb.Append("  Entities: ").Append(Entities).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as QueryEntitiesBody);
        }

        /// <summary>
        /// Returns true if QueryEntitiesBody instances are equal
        /// </summary>
        /// <param name="input">Instance of QueryEntitiesBody to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(QueryEntitiesBody input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Query == input.Query ||
                    (this.Query != null &&
                    this.Query.Equals(input.Query))
                ) && 
                (
                    this.Error == input.Error ||
                    (this.Error != null &&
                    this.Error.Equals(input.Error))
                ) && 
                (
                    this.Entities == input.Entities ||
                    this.Entities != null &&
                    input.Entities != null &&
                    this.Entities.SequenceEqual(input.Entities)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Query != null)
                {
                    hashCode = (hashCode * 59) + this.Query.GetHashCode();
                }
                if (this.Error != null)
                {
                    hashCode = (hashCode * 59) + this.Error.GetHashCode();
                }
                if (this.Entities != null)
                {
                    hashCode = (hashCode * 59) + this.Entities.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
