/*
 * TdRules API - Test Data Coverage Evaluation
 *
 * A set of services to evaluate the coverage of test data.  Coverage criteria are implemented in a set of rules, that when evaluated with respect to a given data store determine the coverage of the data store with respect to the query. Two kind of coverage rules are generated, Full Predicate Coverage (FPC) Rules and SQL Mutants. 
 *
 * The version of the OpenAPI document: 4.0.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Giis.Tdrules.Openapi.Client.OpenAPIDateConverter;

namespace Giis.Tdrules.Openapi.Model
{
    /// <summary>
    /// Contains information about the service versions
    /// </summary>
    [DataContract(Name = "VersionBody")]
    public partial class VersionBody : IEquatable<VersionBody>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="VersionBody" /> class.
        /// </summary>
        /// <param name="serviceVersion">The version number of the running service (default to &quot;&quot;).</param>
        /// <param name="apiVersion">The version number of the api implemented by the service (default to &quot;&quot;).</param>
        /// <param name="environment">The environment where the service is executing (default to &quot;&quot;).</param>
        public VersionBody(string serviceVersion = @"", string apiVersion = @"", string environment = @"")
        {
            // use default value if no "serviceVersion" provided
            this.ServiceVersion = serviceVersion ?? @"";
            // use default value if no "apiVersion" provided
            this.ApiVersion = apiVersion ?? @"";
            // use default value if no "environment" provided
            this.Environment = environment ?? @"";
        }

        /// <summary>
        /// The version number of the running service
        /// </summary>
        /// <value>The version number of the running service</value>
        [DataMember(Name = "serviceVersion", EmitDefaultValue = false)]
        public string ServiceVersion { get; set; }
        public string GetServiceVersion() { return ServiceVersion; }
        public void SetServiceVersion(string value) { ServiceVersion=value; }

        /// <summary>
        /// The version number of the api implemented by the service
        /// </summary>
        /// <value>The version number of the api implemented by the service</value>
        [DataMember(Name = "apiVersion", EmitDefaultValue = false)]
        public string ApiVersion { get; set; }
        public string GetApiVersion() { return ApiVersion; }
        public void SetApiVersion(string value) { ApiVersion=value; }

        /// <summary>
        /// The environment where the service is executing
        /// </summary>
        /// <value>The environment where the service is executing</value>
        [DataMember(Name = "environment", EmitDefaultValue = false)]
        public string Environment { get; set; }
        public string GetEnvironment() { return Environment; }
        public void SetEnvironment(string value) { Environment=value; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class VersionBody {\n");
            sb.Append("  ServiceVersion: ").Append(ServiceVersion).Append("\n");
            sb.Append("  ApiVersion: ").Append(ApiVersion).Append("\n");
            sb.Append("  Environment: ").Append(Environment).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as VersionBody);
        }

        /// <summary>
        /// Returns true if VersionBody instances are equal
        /// </summary>
        /// <param name="input">Instance of VersionBody to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(VersionBody input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.ServiceVersion == input.ServiceVersion ||
                    (this.ServiceVersion != null &&
                    this.ServiceVersion.Equals(input.ServiceVersion))
                ) && 
                (
                    this.ApiVersion == input.ApiVersion ||
                    (this.ApiVersion != null &&
                    this.ApiVersion.Equals(input.ApiVersion))
                ) && 
                (
                    this.Environment == input.Environment ||
                    (this.Environment != null &&
                    this.Environment.Equals(input.Environment))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ServiceVersion != null)
                {
                    hashCode = (hashCode * 59) + this.ServiceVersion.GetHashCode();
                }
                if (this.ApiVersion != null)
                {
                    hashCode = (hashCode * 59) + this.ApiVersion.GetHashCode();
                }
                if (this.Environment != null)
                {
                    hashCode = (hashCode * 59) + this.Environment.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
