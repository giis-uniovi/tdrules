/*
 * TdRules API - Test Data Coverage Evaluation
 *
 * A set of services to evaluate the coverage of test data.  Coverage criteria are implemented in a set of rules, that when evaluated with respect to a given data store determine the coverage of the data store with respect to the query. Two kind of coverage rules are generated, Full Predicate Coverage (FPC) Rules and SQL Mutants. 
 *
 * The version of the OpenAPI document: 4.0.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Giis.Tdrules.Openapi.Client.OpenAPIDateConverter;

namespace Giis.Tdrules.Openapi.Model
{
    /// <summary>
    /// Represents a set of coverage rules (FPC or mutants) that have been generated from a query
    /// </summary>
    [DataContract(Name = "TdRules")]
    public partial class TdRules : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TdRules" /> class.
        /// </summary>
        /// <param name="rulesClass">The class of the rules generated (&#x60;fpc&#x60; or &#x60;mutation&#x60;).</param>
        /// <param name="varVersion">The version number of the service that generates this rule (default to &quot;&quot;).</param>
        /// <param name="varEnvironment">The environment of the service that generates this rule (e.g. development, production) (default to &quot;&quot;).</param>
        /// <param name="summary">A map of additional properties to store information about the results of the evaluation of the coverage or other application specific properties.</param>
        /// <param name="query">The query expression that generated the rules (default to &quot;&quot;).</param>
        /// <param name="parsedquery">The query after being parsed (only if specified by the &#x60;options&#x60; used when calling the service) (default to &quot;&quot;).</param>
        /// <param name="error">If empty, the service successfully obtained the rules, if not, indicates the error occurred, eg. the query is not syntactically correct. This field can be used to store runtime errors when executing generating the rules or executing the query (default to &quot;&quot;).</param>
        /// <param name="rules">The set of rules generated.</param>
        public TdRules(string rulesClass = default(string), string varVersion = @"", string varEnvironment = @"", Dictionary<string, string> summary = default(Dictionary<string, string>), string query = @"", string parsedquery = @"", string error = @"", List<TdRule> rules = default(List<TdRule>))
        {
            this.RulesClass = rulesClass;
            // use default value if no "varVersion" provided
            this.VarVersion = varVersion ?? @"";
            // use default value if no "varEnvironment" provided
            this.VarEnvironment = varEnvironment ?? @"";
            this.Summary = summary;
            // use default value if no "query" provided
            this.Query = query ?? @"";
            // use default value if no "parsedquery" provided
            this.Parsedquery = parsedquery ?? @"";
            // use default value if no "error" provided
            this.Error = error ?? @"";
            this.Rules = rules;
        }

        /// <summary>
        /// The class of the rules generated (&#x60;fpc&#x60; or &#x60;mutation&#x60;)
        /// </summary>
        /// <value>The class of the rules generated (&#x60;fpc&#x60; or &#x60;mutation&#x60;)</value>
        [DataMember(Name = "rulesClass", EmitDefaultValue = false)]
        public string RulesClass { get; set; }
        public string GetRulesClass() { return RulesClass; }
        public void SetRulesClass(string value) { RulesClass=value; }

        /// <summary>
        /// The version number of the service that generates this rule
        /// </summary>
        /// <value>The version number of the service that generates this rule</value>
        [DataMember(Name = "version", EmitDefaultValue = false)]
        public string VarVersion { get; set; }
        public string GetVersion() { return VarVersion; }
        public void SetVersion(string value) { VarVersion=value; }

        /// <summary>
        /// The environment of the service that generates this rule (e.g. development, production)
        /// </summary>
        /// <value>The environment of the service that generates this rule (e.g. development, production)</value>
        [DataMember(Name = "environment", EmitDefaultValue = false)]
        public string VarEnvironment { get; set; }
        public string GetEnvironment() { return VarEnvironment; }
        public void SetEnvironment(string value) { VarEnvironment=value; }

        /// <summary>
        /// A map of additional properties to store information about the results of the evaluation of the coverage or other application specific properties
        /// </summary>
        /// <value>A map of additional properties to store information about the results of the evaluation of the coverage or other application specific properties</value>
        [DataMember(Name = "summary", EmitDefaultValue = false)]
        public Dictionary<string, string> Summary { get; set; }
        public Dictionary<string,string> GetSummary() { return Summary; }
        public void SetSummary(Dictionary<string,string> value) { Summary=value; }
        public void PutSummaryItem(string key, string summaryItem) { if (this.Summary == null) this.Summary = new Dictionary<string,string>(); this.Summary[key]=summaryItem; }

        /// <summary>
        /// The query expression that generated the rules
        /// </summary>
        /// <value>The query expression that generated the rules</value>
        [DataMember(Name = "query", EmitDefaultValue = false)]
        public string Query { get; set; }
        public string GetQuery() { return Query; }
        public void SetQuery(string value) { Query=value; }

        /// <summary>
        /// The query after being parsed (only if specified by the &#x60;options&#x60; used when calling the service)
        /// </summary>
        /// <value>The query after being parsed (only if specified by the &#x60;options&#x60; used when calling the service)</value>
        [DataMember(Name = "parsedquery", EmitDefaultValue = false)]
        public string Parsedquery { get; set; }
        public string GetParsedquery() { return Parsedquery; }
        public void SetParsedquery(string value) { Parsedquery=value; }

        /// <summary>
        /// If empty, the service successfully obtained the rules, if not, indicates the error occurred, eg. the query is not syntactically correct. This field can be used to store runtime errors when executing generating the rules or executing the query
        /// </summary>
        /// <value>If empty, the service successfully obtained the rules, if not, indicates the error occurred, eg. the query is not syntactically correct. This field can be used to store runtime errors when executing generating the rules or executing the query</value>
        [DataMember(Name = "error", EmitDefaultValue = false)]
        public string Error { get; set; }
        public string GetError() { return Error; }
        public void SetError(string value) { Error=value; }

        /// <summary>
        /// The set of rules generated
        /// </summary>
        /// <value>The set of rules generated</value>
        [DataMember(Name = "rules", EmitDefaultValue = false)]
        public List<TdRule> Rules { get; set; }
        public List<TdRule> GetRules() { return Rules; }
        public void SetRules(List<TdRule> value) { Rules=value; }
        public void AddRulesItem(TdRule item) { if (this.Rules == null) this.Rules = new List<TdRule>(); this.Rules.Add(item); }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TdRules {\n");
            sb.Append("  RulesClass: ").Append(RulesClass).Append("\n");
            sb.Append("  VarVersion: ").Append(VarVersion).Append("\n");
            sb.Append("  VarEnvironment: ").Append(VarEnvironment).Append("\n");
            sb.Append("  Summary: ").Append(Summary).Append("\n");
            sb.Append("  Query: ").Append(Query).Append("\n");
            sb.Append("  Parsedquery: ").Append(Parsedquery).Append("\n");
            sb.Append("  Error: ").Append(Error).Append("\n");
            sb.Append("  Rules: ").Append(Rules).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
