/*
 * TdRules API - Test Data Coverage Evaluation
 *
 * A set of services to evaluate the coverage of test data.  Coverage criteria are implemented in a set of rules, that when evaluated with respect to a given data store determine the coverage of the data store with respect to the query. Two kind of coverage rules are generated, Full Predicate Coverage (FPC) Rules and SQL Mutants. 
 *
 * The version of the OpenAPI document: 4.0.2
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Giis.Tdrules.Openapi.Client.OpenAPIDateConverter;

namespace Giis.Tdrules.Openapi.Model
{
    /// <summary>
    /// Represents the actual parameters used to execute a rule or query at a given time
    /// </summary>
    [DataContract(Name = "RunParams")]
    public partial class RunParams : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RunParams" /> class.
        /// </summary>
        /// <param name="when">The moment in which the query or rule has been executed with these parameters (e.g. timestamp, sequence number) (default to &quot;&quot;).</param>
        /// <param name="result">The result of the rule evaluation with these parameters (default to &quot;&quot;).</param>
        /// <param name="varParams">The actual values of the parameters used to execute this query or rule.</param>
        public RunParams(string when = @"", string result = @"", List<QueryParam> varParams = default(List<QueryParam>))
        {
            // use default value if no "when" provided
            this.When = when ?? @"";
            // use default value if no "result" provided
            this.Result = result ?? @"";
            this.Params = varParams;
        }

        /// <summary>
        /// The moment in which the query or rule has been executed with these parameters (e.g. timestamp, sequence number)
        /// </summary>
        /// <value>The moment in which the query or rule has been executed with these parameters (e.g. timestamp, sequence number)</value>
        [DataMember(Name = "when", EmitDefaultValue = false)]
        public string When { get; set; }

        /// <summary>
        /// The result of the rule evaluation with these parameters
        /// </summary>
        /// <value>The result of the rule evaluation with these parameters</value>
        [DataMember(Name = "result", EmitDefaultValue = false)]
        public string Result { get; set; }

        /// <summary>
        /// The actual values of the parameters used to execute this query or rule
        /// </summary>
        /// <value>The actual values of the parameters used to execute this query or rule</value>
        [DataMember(Name = "params", EmitDefaultValue = false)]
        public List<QueryParam> Params { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class RunParams {\n");
            sb.Append("  When: ").Append(When).Append("\n");
            sb.Append("  Result: ").Append(Result).Append("\n");
            sb.Append("  Params: ").Append(Params).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
