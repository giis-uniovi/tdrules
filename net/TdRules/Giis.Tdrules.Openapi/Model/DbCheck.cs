/*
 * SQLRules API - Evaluation of test coverage for SQL database queries
 *
 * A set of services to evaluate the coverage of SQL database queries. Coverage criteria are implemented in a set of rules, that when evaluated with respect to a given database determine the coverage of the database with respect to the query. Two kind of coverage rules are generated, Full Predicate Coverage rules for SQL (SQLFpc) and Mutants for SQL (SQLMutation)
 *
 * The version of the OpenAPI document: 3.1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Giis.Tdrules.Openapi.Client.OpenAPIDateConverter;

namespace Giis.Tdrules.Openapi.Model
{
    /// <summary>
    /// Represents a constraints associated to a table
    /// </summary>
    [DataContract(Name = "DbCheck")]
    public partial class DbCheck : IEquatable<DbCheck>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DbCheck" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected DbCheck() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="DbCheck" /> class.
        /// </summary>
        /// <param name="column">The name of the column that has this constraint (if associated to only one column) (default to &quot;&quot;).</param>
        /// <param name="name">The name constraint as determined by jdbc (default to &quot;&quot;).</param>
        /// <param name="constraint">The constraint expression as determined by jdbc (required) (default to &quot;&quot;).</param>
        public DbCheck(string column = @"", string name = @"", string constraint = @"")
        {
            // to ensure "constraint" is required (not null)
            if (constraint == null)
            {
                throw new ArgumentNullException("constraint is a required property for DbCheck and cannot be null");
            }
            this.Constraint = constraint;
            // use default value if no "column" provided
            this.Column = column ?? @"";
            // use default value if no "name" provided
            this.Name = name ?? @"";
        }

        /// <summary>
        /// The name of the column that has this constraint (if associated to only one column)
        /// </summary>
        /// <value>The name of the column that has this constraint (if associated to only one column)</value>
        [DataMember(Name = "column", EmitDefaultValue = false)]
        public string Column { get; set; }
        public string GetColumn() { return Column; }
        public void SetColumn(string value) { Column=value; }

        /// <summary>
        /// The name constraint as determined by jdbc
        /// </summary>
        /// <value>The name constraint as determined by jdbc</value>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }
        public string GetName() { return Name; }
        public void SetName(string value) { Name=value; }

        /// <summary>
        /// The constraint expression as determined by jdbc
        /// </summary>
        /// <value>The constraint expression as determined by jdbc</value>
        [DataMember(Name = "constraint", IsRequired = true, EmitDefaultValue = true)]
        public string Constraint { get; set; }
        public string GetConstraint() { return Constraint; }
        public void SetConstraint(string value) { Constraint=value; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DbCheck {\n");
            sb.Append("  Column: ").Append(Column).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Constraint: ").Append(Constraint).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DbCheck);
        }

        /// <summary>
        /// Returns true if DbCheck instances are equal
        /// </summary>
        /// <param name="input">Instance of DbCheck to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DbCheck input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Column == input.Column ||
                    (this.Column != null &&
                    this.Column.Equals(input.Column))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Constraint == input.Constraint ||
                    (this.Constraint != null &&
                    this.Constraint.Equals(input.Constraint))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Column != null)
                {
                    hashCode = (hashCode * 59) + this.Column.GetHashCode();
                }
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.Constraint != null)
                {
                    hashCode = (hashCode * 59) + this.Constraint.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
