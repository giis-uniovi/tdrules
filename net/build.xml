<project name="TdRules" default="sharpen" basedir="." xmlns:if="ant:if" xmlns:unless="ant:unless" xmlns:dn="antlib:org.apache.ant.dotnet" xmlns="antlib:org.apache.tools.ant">

	<description>Convert TdRules clients to C#</description>

  <target name="openapi" xmlns:if="ant:if" xmlns:unless="ant:unless" description="Genera el modelo a partir del esquema openapi">
    <runOpenapi />
  </target>

  <macrodef name="runOpenapi" xmlns:if="ant:if" xmlns:unless="ant:unless"
          description="Genera el modelo a partir del esquema openapi">
    <sequential>
      <mkdir dir="sharpen-temp/lib"/>
      <xmlproperty file="../pom.xml"/>
      <property name="OAG_VERSION" value="${project.properties.openapi.generator.version}" />
      <echo>Using openapi generator version ${OAG_VERSION}</echo>
      <get src="https://repo1.maven.org/maven2/org/openapitools/openapi-generator-cli/${OAG_VERSION}/openapi-generator-cli-${OAG_VERSION}.jar"
           dest="sharpen-temp/lib/openapi-generator-cli-${OAG_VERSION}.jar" usetimestamp="true" />
      
      <copy todir="OpenApi-temp/" >
        <fileset dir="../tdrules-model/src/main/resources/api/v4/" />
      </copy>
      
      <exec executable="java" failonerror="true" >
        <arg value="-jar" />
        <arg value="sharpen-temp/lib/openapi-generator-cli-${OAG_VERSION}.jar" />
        <arg value="generate" />
        <arg value="--input-spec" />
        <arg value="OpenApi-temp/api.yml" />
        <arg value="--generator-name" />
        <arg value="csharp" />
        <arg value="--library" />
        <arg value="restsharp" />
        <arg value="--additional-properties" />
        <arg value="nullableReferenceTypes=false,targetFramework=netstandard2.0" />
        <arg value="--output" />
        <arg value="OpenApi-temp" />
        <arg value="--package-name" />
        <arg value="Giis.Tdrules.Openapi" />
      </exec>
      <!--Copia y remplaza namespaces, a diferencia de java, no pone los especificados debajo de Org.openAPITools e Invoker se llama Client -->
      <copy todir="TdRules/Giis.Tdrules.Openapi" flatten="false" includeEmptyDirs="false" >
        <fileset dir="OpenApi-temp/src/Giis.Tdrules.Openapi/" >
          <exclude name="*.csproj" />
        </fileset>
      </copy>

      <!--Postprocessing: add getters and setters to the model for java compatibility-->
      <echo>Run OpenApiPostprocess</echo>
      <exec executable="dotnet" failonerror="true" >
        <arg value="run" />
        <arg value="--project" />
        <arg value="OpenApiPostprocess/OpenApiPostprocess.csproj" />
        <arg value="TdRules/Giis.Tdrules.Openapi/Model" />
      </exec>
    </sequential>
  </macrodef>

  <!-- To prepare and publish to the GitHub package repository see build-nuget-prepare.sh in javiertuya/portable repo -->

  <macrodef name="runConvert" description="Execute the JavaToCSharp converter">
    <attribute name="input" />
    <attribute name="output" />
    <attribute name="mapping" default="" />
    <sequential>
      <delete>
        <fileset dir="@{output}" includes="*.cs" />
      </delete>
      <echo>Converting '@{input}' to '@{output}' - Mapping file: '@{mapping}'</echo>
      <!--<exec executable="JavaToCSharp-temp/JavaToCSharpCli/bin/Debug/net8.0/JavaToCSharpCli" failonerror="true">-->
      <exec executable="JavaToCSharpCli" failonerror="true">
        <arg value="--include-subdirectories" />
        <arg value="false" />
        <arg value="--start-interface-names-with-i" />
        <arg value="false" />
        <arg value="--add-using" />
        <arg value="converted.placeholder" />
        <arg value="--mappings-file" unless:blank="mapping" />
        <arg value="@{mapping}" unless:blank="mapping" />
        <arg value="dir" />
        <arg value="@{input}" />
        <arg value="@{output}" />
      </exec>
    </sequential>
  </macrodef>

  <target name="convert">
    <!-- Basic conversion and postprocessing of sources and tests (junit4 into nunit3) -->
    <runConvert input="../tdrules-store-shared/src/main/java/giis/tdrules/store/dtypes" output="TdRules/Translated/Giis.Tdrules.Store.Dtypes"  mapping="java-mapping.yml" />
    <runConvert input="../tdrules-store-shared/src/main/java/giis/tdrules/store/ids" output="TdRules/Translated/Giis.Tdrules.Store.Ids"  mapping="java-mapping.yml" />
    <runConvert input="../tdrules-store-shared/src/main/java/giis/tdrules/store/stypes" output="TdRules/Translated/Giis.Tdrules.Store.Stypes"  mapping="java-mapping.yml" />
    <runConvert input="../tdrules-model/src/main/java/giis/tdrules/model/shared" output="TdRules/Translated/Giis.Tdrules.Model.Shared"  mapping="java-mapping.yml" />
    <runConvert input="../tdrules-model/src/main/java/giis/tdrules/model/io" output="TdRules/Translated/Giis.Tdrules.Model.IO"  mapping="java-mapping.yml" />
    <runConvert input="../tdrules-client/src/main/java/giis/tdrules/client" output="TdRules/Translated/Giis.Tdrules.Client"  mapping="java-mapping.yml" />
    <runConvert input="../tdrules-store-rdb/src/main/java/giis/tdrules/store/rdb" output="TdRules/Translated/Giis.Tdrules.Store.Rdb"  mapping="java-mapping.yml" />
    <runConvert input="../tdrules-client-rdb/src/main/java/giis/tdrules/client/rdb" output="TdRules/Translated/Giis.Tdrules.Client.Rdb"  mapping="java-mapping.yml" />
    <delete file="TdRules/Translated/Giis.Tdrules.Model.Shared/ModelException.cs" />
    <delete file="TdRules/Translated/Giis.Tdrules.Model.Shared/OAExtensions.cs" />
    <delete file="TdRules/Translated/Giis.Tdrules.Model.IO/ModelJsonSerializer.cs" />
    
    <runConvert input="../tdrules-store-shared/src/test/java/test4giis/tdrules/store/ids" output="TdRulesTest/Translated/Test4giis.Tdrules.Store.Ids"  mapping="java-mapping.yml" />
    <runConvert input="../tdrules-model/src/test/java/test4giis/tdrules/model" output="TdRulesTest/Translated/Test4giis.Tdrules.Model"  mapping="java-mapping.yml" />
    <runConvert input="../tdrules-store-rdb/src/test/java/test4giis/tdrules/store/rdb" output="TdRulesTest/Translated/Test4giis.Tdrules.Store.Rdb"  mapping="java-mapping.yml" />
    <runConvert input="../tdrules-store-rdb/src/test/java/test4giis/tdrules/store/rdb/sqlite" output="TdRulesTest/Translated/Test4giis.Tdrules.Store.Rdb.Sqlite"  mapping="java-mapping.yml" />
    <runConvert input="../tdrules-client-rdb/src/test/java/test4giis/tdrules/client/rdb" output="TdRulesTest/Translated/Test4giis.Tdrules.Client.Rdb"  mapping="java-mapping.yml" />
    <delete file="TdRulesTest/Translated/Test4giis.Tdrules.Store.Ids/TestTableIdentifierCombinations.cs" />
    <delete file="TdRulesTest/Translated/Test4giis.Tdrules.Model/TestModelJsonSerialization.cs" />
    <delete file="TdRulesTest/Translated/Test4giis.Tdrules.Model/TestSchemaFilter.cs" />
    <delete file="TdRulesTest/Translated/Test4giis.Tdrules.Model/TestSchemaSorter.cs" />
    <delete file="TdRulesTest/Translated/Test4giis.Tdrules.Model/TestTdAttributeExtensions.cs" />
    <delete file="TdRulesTest/Translated/Test4giis.Tdrules.Model/TestTdEntityExtensions.cs" />
    <delete file="TdRulesTest/Translated/Test4giis.Tdrules.Model/TestTdSchemaExtensions.cs" />
    <delete file="TdRulesTest/Translated/Test4giis.Tdrules.Client.Rdb/TestPostgresReadModelComposite.cs" />

    <replace dir="." >
      <include name="*/Translated/**/*.cs" />
      <replacefilter token="Dictionary&lt;" value="Map&lt;" />
      <replacefilter token="Dictionary" value="Map" />
      <replacefilter token="Giis.Tdrules.Model.Io" value="Giis.Tdrules.Model.IO" />
      <replacefilter token="Test4giis.Tdrules.Model.Io" value="Test4giis.Tdrules.Model.IO" />
      <replacefilter token="private static readonly long serialVersionUID" value="//private static readonly long serialVersionUID" />
      <replacefilter token="IllegalAccessError" value="InvalidOperationException" />
      <replacefilter token="public virtual string ToString()" value="public override string ToString()" />
      <replacefilter token="LoggerFactory.GetLogger(typeof(" value="Giis.Portable.Util.NLogUtil.GetLogger(typeof(" />
      <replacefilter token="Class clazz" value="Type clazz" />

      <replacefilter token=".length" value=".Length" />
      <replacefilter token=".ToUpperCase()" value=".ToUpper()" />
      <replacefilter token="e.GetMessage()" value="e.Message" />
      <replacefilter token="StoreType[dbmsname]" value="StoreType.Get(dbmsname)" />

      <replacefilter token=".SetFramework(Framework.JUNIT4)" value="" />
      <replacefilter token="public TestName testName = new TestName();" value="" />
      <replacefilter token="testName.GetMethodName()" value="NUnit.Framework.TestContext.CurrentContext.Test.Name" />
      <replacefilter token="using Org.Hamcrest.MatcherAssert;" value="" />
      <replacefilter token="using Org.Hamcrest;" value="" />
      <replacefilter token="using Org.Junit.Assert;" value="" />
      <replacefilter token="using Org.Junit.Rules;" value="" />

      <replacefilter token="using converted.placeholder;" value="/////// THIS FILE HAS BEEN AUTOMATICALLY CONVERTED FROM THE JAVA SOURCES. DO NOT EDIT ///////" />
    </replace>

    <!-- Specific code patterns in individual files, make fail if no replacement to alert on changes in the source code -->
    <replace file="TdRules/Translated/Giis.Tdrules.Store.Dtypes/DataTypes.cs" token="Map&lt;Integer, String[]&gt;" value="Map&lt;int, String[]&gt;" failOnNoReplacements="true" />
    <replace file="TdRules/Translated/Giis.Tdrules.Model.Shared/ModelUtil.cs" token="Collections.EmptyList()" value="new List&lt;T&gt;()" failOnNoReplacements="true" />
    <replace file="TdRules/Translated/Giis.Tdrules.Model.Shared/ModelUtil.cs" token="Collections.EmptyMap()" value="new TreeMap&lt;string, string&gt;()" failOnNoReplacements="true" />
    <replace file="TdRules/Translated/Giis.Tdrules.Client/TdRulesApi.cs" token="using Giis.Tdrules.Openapi.Invoker;" value="//using Giis.Tdrules.Openapi.Invoker;" failOnNoReplacements="true" />
    <replace file="TdRules/Translated/Giis.Tdrules.Client/TdRulesApi.cs" token="public class TdRulesApi : TdRulesApi" value="public class TdRulesApi : Giis.Tdrules.Openapi.Api.TdRulesApi" failOnNoReplacements="true" />
    <replace file="TdRules/Translated/Giis.Tdrules.Client/TdRulesApi.cs" token=": base(new ApiClient().SetBasePath(&quot;&quot;.Equals(Coalesce(endpoint)) ? DEFAULT_ENDPOINT : endpoint))"
             value=": base(endpoint == null || endpoint.Trim()==&quot;&quot; ? DEFAULT_ENDPOINT : endpoint)" failOnNoReplacements="true" />
    <replace file="TdRules/Translated/Giis.Tdrules.Client/TdRulesApi.cs" token="new TdRulesCacheManager(base.GetApiClient().GetBasePath())"
             value="new TdRulesCacheManager(endpoint == null || endpoint.Trim()==&quot;&quot; ? DEFAULT_ENDPOINT : endpoint)" failOnNoReplacements="true" />
    <replace file="TdRules/Translated/Giis.Tdrules.Client.Rdb/SchemaWriter.cs" token="String.ValueOf(colSize)" value="colSize.ToString()" failOnNoReplacements="true" />

    <replace file="TdRulesTest/Translated/Test4giis.Tdrules.Client.Rdb/Base.cs" token="catch (SQLException e)" value="catch (SQLException)" failOnNoReplacements="true" />
    <replace file="TdRulesTest/Translated/Test4giis.Tdrules.Model/Base.cs" token="AssertThat(actual, CoreMatchers.ContainsString(expectedSubstring));"
             value="NUnit.Framework.Legacy.ClassicAssert.IsTrue(actual.Contains(expectedSubstring), &quot;Expected substring should be contained in actual: &quot; + actual);" failOnNoReplacements="true" />
    <replace file="TdRulesTest/Translated/Test4giis.Tdrules.Store.Rdb/TestSqlserverResultSet.cs" token="Date tdate" value="DateTime tdate" failOnNoReplacements="true" />
    <replace file="TdRulesTest/Translated/Test4giis.Tdrules.Store.Rdb/Base.cs" token="AssertThat(actual, CoreMatchers.ContainsString(expectedSubstring));"
               value="NUnit.Framework.Legacy.ClassicAssert.IsTrue(actual.Contains(expectedSubstring), &quot;Expected substring should be contained in actual: &quot; + actual);" failOnNoReplacements="true" />
    <replace file="TdRulesTest/Translated/Test4giis.Tdrules.Store.Rdb/Base.cs" token="AssertThat(actual, CoreMatchers.Not(CoreMatchers.ContainsString(unexpectedSubstring)));"
               value="NUnit.Framework.Legacy.ClassicAssert.IsFalse(actual.Contains(unexpectedSubstring), &quot;Expected substring should not be contained in actual: &quot; + actual);" failOnNoReplacements="true" />

    <!-- Dictionaries are declared using a custom Map implementation, but methods from the generated OpenAPI model
    return Dictionary classes. Renames Map by Dictionary in the safe functions-->
    <replace file="TdRules/Translated/Giis.Tdrules.Model.Shared/ModelUtil.cs" token="TreeMap&lt;" value="Dictionary&lt;" failOnNoReplacements="false" />
    <replace file="TdRules/Translated/Giis.Tdrules.Model.Shared/ModelUtil.cs" token="Map&lt;" value="Dictionary&lt;" failOnNoReplacements="false" />
    <replace file="TdRulesTest/Translated/Test4giis.Tdrules.Model/TestModelUtil.cs" token="Map&lt;" value="Dictionary&lt;" failOnNoReplacements="false" />
    <replace file="TdRulesTest/Translated/Test4giis.Tdrules.Model/TestSchemaModel.cs" token="Map&lt;string, string&gt; extended =" value="Dictionary&lt;string, string&gt; extended =" failOnNoReplacements="false" />
    <!-- Also getting the extended properties -->
    <replace file="TdRules/Translated/Giis.Tdrules.Model.IO/BaseXmlSerializer.cs" token="string SetExtendedAttributes(Map" value="string SetExtendedAttributes(Dictionary" failOnNoReplacements="false" />
    <replace file="TdRules/Translated/Giis.Tdrules.Model.IO/BaseXmlSerializer.cs" token="extended.KeySet()" value="extended.Keys" failOnNoReplacements="false" />
  </target>
</project>