package giis.tdrules.store.loader.oa.script;

import java.util.List;
import java.util.Map;
import java.util.Set;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.node.ArrayNode;
import com.fasterxml.jackson.databind.node.ObjectNode;

import giis.tdrules.store.loader.oa.GeneratedObject;

/**
 * Converts the objects generated by a live adapter into a Postman Collection
 */
public class PostmanWriter {

	private List<GeneratedObject> allGenerated;
	private Map<String, String> definitions;
	private Set<String> unquoted;
	
	public PostmanWriter(List<GeneratedObject> allGenerated, Map<String, String> definitions, Set<String> unquoted) {
		this.allGenerated = allGenerated;
		this.definitions = definitions;
		this.unquoted = unquoted;
	}
	public String getAsString() {
		ObjectMapper mapper = new ObjectMapper();
		ObjectNode collection = mapper.createObjectNode();
		ObjectNode info = mapper.createObjectNode();
		info.put("name", "TdRules Loader Generated Scenario");
		info.put("schema", "https://schema.getpostman.com/json/collection/v2.1.0/collection.json");
		collection.set("info", info);
		
		ArrayNode items = mapper.createArrayNode();
		for (GeneratedObject obj : this.allGenerated) {
			ObjectNode item = mapper.createObjectNode();
			item.put("name", obj.id);
			
			if (definitions.containsKey(obj.id))
				item.set("event", getPostRequestScript(obj) );
			
			ObjectNode request = mapper.createObjectNode();
			request.put("method", obj.method);
			request.put("url", obj.url);
			request.set("body", getBody(obj.requestBody));
			item.set("request", request);
			
			items.add(item);
		}
		collection.set("item", items);
		String json = collection.toPrettyString();
		
		// Remove quotes of variables that must be unquoted (numeric)
		for (String variable : unquoted)
			json = json.replace("\\\"{{" + variable + "}}\\\"", "{{" + variable + "}}");
		return json;
	}
	
	private ArrayNode getPostRequestScript(GeneratedObject obj) {
		ObjectMapper mapper = new ObjectMapper();
		ArrayNode events = mapper.createArrayNode();
		ObjectNode event = mapper.createObjectNode();
		event.put("listen", "test");
		event.set("script", getScript(obj));
		events.add(event);
		return events;
	}
	private ObjectNode getScript(GeneratedObject obj) {
		ObjectMapper mapper = new ObjectMapper();
		ObjectNode script = mapper.createObjectNode();
		ArrayNode execs = mapper.createArrayNode();
		String varName = obj.id;
		execs.add("var " + varName + " = " + "pm.response.json()." + definitions.get(varName) + ";");
		execs.add("pm.globals.set(\"" + varName + "\", " + varName + ");");
		script.set("exec", execs);
		script.put("type", "text/javascript");
		return script;
	}
	private ObjectNode getBody(ObjectNode requestBody) {
		ObjectMapper mapper = new ObjectMapper();
		ObjectNode body = mapper.createObjectNode();
		body.put("mode", "raw");
		String rawBody = requestBody.toPrettyString().replace("\r", "");
		body.put("raw", rawBody);
		return body;
	}

}
