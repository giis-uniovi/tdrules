package giis.tdrules.store.loader.oa.script;

import java.util.List;
import java.util.Map;
import java.util.Set;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.node.ArrayNode;
import com.fasterxml.jackson.databind.node.ObjectNode;

import giis.tdrules.store.loader.oa.GeneratedObject;

/**
 * Converts the objects generated by a live adapter into a Postman Collection
 */
public class PostmanWriter {

	private List<GeneratedObject> allGenerated;
	private Map<String, String> definitions;
	private Set<String> unquoted;
	private ObjectMapper mapper;
	
	public PostmanWriter(List<GeneratedObject> allGenerated, Map<String, String> definitions, Set<String> unquoted) {
		this.allGenerated = allGenerated;
		this.definitions = definitions;
		this.unquoted = unquoted;
		this.mapper = new ObjectMapper();
	}
	public String getAsString() {
		ObjectNode info = createObjectNode("name", "TdRules Loader Generated Scenario",
				"schema", "https://schema.getpostman.com/json/collection/v2.1.0/collection.json");
		ObjectNode collection = mapper.createObjectNode();
		collection.set("info", info);
		
		ArrayNode items = mapper.createArrayNode();
		for (GeneratedObject obj : this.allGenerated) {
			ObjectNode item = createObjectNode("name", obj.id);
			
			if (definitions.containsKey(obj.id))
				item.set("event", createPostRequestScriptNode(obj));
			
			ObjectNode request = createObjectNode("method", obj.method);
			request.set("header", createHeadersNode());
			request.put("url", obj.url);
			request.set("body", createBodyNode(obj.requestBody));
			
			item.set("request", request);
			items.add(item);
		}
		collection.set("item", items);
		String json = collection.toPrettyString();
		
		// Remove quotes of variables that must be unquoted (numeric)
		for (String variable : unquoted)
			json = json.replace("\\\"{{" + variable + "}}\\\"", "{{" + variable + "}}");
		return json;
	}
	
	private ArrayNode createPostRequestScriptNode(GeneratedObject obj) {
		ObjectNode event = mapper.createObjectNode();
		event.put("listen", "test");
		event.set("script", createScriptNode(obj));
		
		ArrayNode events = mapper.createArrayNode();
		events.add(event);
		return events;
	}
	private ObjectNode createScriptNode(GeneratedObject obj) {
		String varName = obj.id;
		ArrayNode execs = mapper.createArrayNode();
		execs.add("var " + varName + " = " + "pm.response.json()." + definitions.get(varName) + ";");
		execs.add("pm.globals.set(\"" + varName + "\", " + varName + ");");
		
		ObjectNode script = mapper.createObjectNode();
		script.set("exec", execs);
		script.put("type", "text/javascript");
		return script;
	}
	private ArrayNode createHeadersNode() {
		ArrayNode headers = mapper.createArrayNode();
		headers.add(createObjectNode("key", "Content-Type", "value", "application/json"));
		headers.add(createObjectNode("key", "Accept", "value", "application/json"));
		return headers;
	}
	private ObjectNode createBodyNode(ObjectNode requestBody) {
		String rawBody = requestBody.toPrettyString().replace("\r", "");
		ObjectNode body = createObjectNode("mode", "raw", "raw", rawBody);
		
		ObjectNode optionsRaw = createObjectNode("headerFamily", "json", "language", "json");
		ObjectNode options = mapper.createObjectNode();
		options.set("raw", optionsRaw);
		
		body.set("options", options);
		return body;
	}

	// a more compact way to create object nodes containing key value pairs
	private ObjectNode createObjectNode(String... keyValue) {
		ObjectNode obj = mapper.createObjectNode();
		for (int i = 0; i < keyValue.length; i += 2)
			obj.put(keyValue[i], keyValue[i+1]);
		return obj;
	}

}
